Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

 

Example 1:

Input: word1 = ["ab", "c"], word2 = ["a", "bc"]
Output: true
Explanation:
word1 represents string "ab" + "c" -> "abc"
word2 represents string "a" + "bc" -> "abc"
The strings are the same, so return true.


Example 2:

Input: word1 = ["a", "cb"], word2 = ["ab", "c"]
Output: false


Example 3:

Input: word1  = ["abc", "d", "defg"], word2 = ["abcddefg"]
Output: true
 

Constraints:

1 <= word1.length, word2.length <= 10^3
1 <= word1[i].length, word2[i].length <= 10^3
1 <= sum(word1[i].length), sum(word2[i].length) <= 10^3
word1[i] and word2[i] consist of lowercase letters.



======================================Solution=======================================

Python


class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        return "".join(word1) == "".join(word2)


class Solution:
    def arrayStringsAreEqual(self, word1, word2):
        """
        The below solutions take O(n + m) time and space, as we are 
            * Iterating through both list (Time complexity : O(n+m))
            * Adding strings each time. In the backend a new string is created 
                with increased size. (Space complexity O(n+m))

        However, we can optimized it. Suppose if the first character doesnot match than the whole
        concatenation was unecessary. 
        So the Idea is to compare the character in the strings on the fly.

        We can skip building the strings and only compare the individual characters using space O(1).
        It also saves time as we will not be going through the whole list if any characters mismatched.

        We can use a generator or a pointer approach to solve this problem.
		    Time complexity : O(n) if n<m else O(m)
		    Space complexity: O(1)
        """
        def gen(word):
            for w in word:
                for c in w:
                    yield c

            yield None        
        for c1, c2 in zip(gen(word1), gen(word2)):
            if c1 != c2:
                return False
        return True
    
        """Brute Force approach
        Time complexity : O(n^2 + m^2)
        Space complexity: O(n+m) #debatable
        """
#         str1 = str2 = ""        
#         for s in word1:
#             str1 += s
#         for s in word2:
#             str2 += s            
#         return str1==str2
    
        """One liner
        Time complexity : O(n+m)
		    Space complexity : O(1)
        """
        # return ''.join(word1) == ''.join(word2)
    


TestCase 1:
Input
word1 =
["ab", "c"]
word2 =
["a", "bc"]
Output
true
Expected
true

TestCase 2:
Input
word1 =
["a", "cb"]
word2 =
["ab", "c"]
Output
false
Expected
false

TestCase 3:
Input
word1 =
["abc", "d", "defg"]
word2 =
["abcddefg"]
Output
true
Expected
true
