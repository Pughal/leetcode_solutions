You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]


Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]


Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
 

Constraints:

1 <= nums1.length, nums2.length <= 10^5
-10^9 <= nums1[i], nums2[i] <= 10^9
nums1 and nums2 both are sorted in ascending order.
1 <= k <= 10^4


========================================Solution========================================

Python

class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        res = []
        if not nums1 or not nums2 or not k:
            return res
        
        heap = []
        visited = set()
        
        heapq.heappush(heap, (nums1[0] + nums2[0], 0, 0))
        
        visited.add((0, 0))
        
        while k and heap:
            _, i, j = heapq.heappop(heap)
            res.append([nums1[i], nums2[j]])
            
            if i + 1 < len(nums1) and (i + 1, j) not in visited:
                heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))
                visited.add((i + 1, j))
            
            if j + 1 < len(nums2) and (i, j + 1) not in visited:
                heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))
                visited.add((i, j + 1))
            k -= 1
        
        return res


class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        result = []
        pq = [(nums1[0] + nums2[0], 0, 0)]
        l1, l2 = len(nums1), len(nums2)

        while pq and len(result) < k:
            _, i, j = heapq.heappop(pq)
            result.append([nums1[i], nums2[j]])
            if j + 1 < l2:
                heapq.heappush(pq, (nums1[i] + nums2[j + 1], i, j + 1))
            if j == 0 and i + 1 < l1:
                heapq.heappush(pq, (nums1[i + 1] + nums2[j], i + 1, j))

        return result



from queue import PriorityQueue
import heapq
import itertools
    
class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        
        #return sorted(itertools.product(nums1, nums2), key= lambda x: x[0]+x[1])[:k]
        #return map(list, heapq.nsmallest(k, itertools.product(nums1, nums2), key=sum))
        
        queue = []
        def push(i, j):
            if i < len(nums1) and j < len(nums2):
                heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
        push(0, 0)
        pairs = []
        while queue and len(pairs) < k:
            _, i, j = heapq.heappop(queue)
            pairs.append([nums1[i], nums2[j]])
            push(i, j + 1)
            if j == 0:
                push(i + 1, 0)
        return pairs

        # q = PriorityQueue()
        # for i in range(len(nums1)):
        #     for j in range(len(nums2)):
        #         if k >0:
        #             q.put(((nums1[i]+nums2[j])*-1, [nums1[i], nums2[j]]))
        #             k -= 1
        #             continue
        #         value, l = q.get()
        #         if (nums1[i] + nums2[j]) * -1 > value:
        #             q.put(((nums1[i] + nums2[j]) * -1, [nums1[i], nums2[j]]))
        #         else:
        #             q.put((value, l))
        # out = [] 
        # while not q.empty():
        #     value, l = q.get()
        #     out.append(l[:])
        # return out



TestCase 1:
Input
nums1 =
[1,7,11]
nums2 =
[2,4,6]
k =
3
Output
[[1,2],[1,4],[1,6]]
Expected
[[1,2],[1,4],[1,6]]

TestCase 2:
Input
nums1 =
[1,1,2]
nums2 =
[1,2,3]
k =
2
Output
[[1,1],[1,1]]
Expected
[[1,1],[1,1]]

TestCase 3:
Input
nums1 =
[1,2]
nums2 =
[3]
k =
3
Output
[[1,3],[2,3]]
Expected
[[1,3],[2,3]]
