You are given the head of a linked list.

Remove every node which has a node with a greater value anywhere to the right side of it.

Return the head of the modified linked list.

 

Example 1:


Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.


Example 2:

Input: head = [1,1,1,1]
Output: [1,1,1,1]
Explanation: Every node has value 1, so no nodes are removed.
 

Constraints:

The number of the nodes in the given list is in the range [1, 10^5].
1 <= Node.val <= 10^5





# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
  def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
    if not head:
      return None
    head.next = self.removeNodes(head.next)
    return head.next if head.next and head.val < head.next.val else head




# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        res = []
        node = head
        while node:
            while res and res[-1] < node.val:
                res.pop()
            res.append(node.val)
            node = node.next
        node = head
        prev = ListNode(0)
        prev.next = head
        for i in res:
            node.val = i
            node = node.next
            prev = prev.next
        if node:
            prev.next = None
        return head



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        stack = [ListNode(float('inf'))]
        newHead = stack[-1]

        p1 = head

        while p1:
            while stack and stack[-1].val < p1.val:
                stack.pop()
            stack[-1].next = p1
            stack.append(p1)
            p1 = p1.next
        return newHead.next
