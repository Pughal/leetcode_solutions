Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

Example 1:

Input: n = 16
Output: true


Example 2:

Input: n = 5
Output: false


Example 3:

Input: n = 1
Output: true
 

Constraints:

-2^31 <= n <= 2^31 - 1
 

Follow up: Could you solve it without loops/recursion?



=========================================Solution==============================================

Python


class Solution:
  def isPowerOfFour(self, n: int) -> bool:
    # Why (4^n - 1) % 3 == 0?
    # (4^n - 1) = (2^n - 1)(2^n + 1) and 2^n - 1, 2^n, 2^n + 1 are
    # Three consecutive numbers among one of them, there must be a multiple
    # Of 3, and that can't be 2^n, so it must be either 2^n - 1 or 2^n + 1.
    # Therefore, 4^n - 1 is a multiple of 3.
    return n > 0 and bin(n).count('1') == 1 and (n - 1) % 3 == 0


class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        return n > 0 and math.log2(n)%2 == 0 


import math
class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        if(n > 0):
            a = math.log(n, 4)
            x = math.floor(a)
            if(math.pow(4, x) == n):
                return True
            else:
                return False
        else:
            return False


class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        return n>0 and log(n,4).is_integer()


TestCase 1:
Input
n =
16
Output
true
Expected
true

TestCase 2:
Input
n =
5
Output
false
Expected
false

TestCase 3:
Input
n =
1
Output
true
Expected
true
