You are given an integer n and a 2D integer array queries.

There are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.

queries[i] = [ui, vi] represents the addition of a new unidirectional road from city ui to city vi. After each query, you need to find the length of the shortest path from city 0 to city n - 1.

Return an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.

 

Example 1:

Input: n = 5, queries = [[2,4],[0,2],[0,4]]
Output: [3,2,1]

Explanation:
After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.
After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.
After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.

Example 2:

Input: n = 4, queries = [[0,3],[0,2]]
Output: [1,1]

Explanation:
After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.
After the addition of the road from 0 to 2, the length of the shortest path remains 1.

 

Constraints:

3 <= n <= 500
1 <= queries.length <= 500
queries[i].length == 2
0 <= queries[i][0] < queries[i][1] < n
1 < queries[i][1] - queries[i][0]
There are no repeated roads among the queries.



===================================Solution=======================================

Python

class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        adj = [[i + 1] for i in range(n)]

        def shortest_path():
            q = deque()
            q.append((0, 0))  # node, length
            visit = set()
            visit.add((0, 0))
            while q:
                cur, length = q.popleft()
                if cur == n - 1:
                    return length
                for nei in adj[cur]:
                    if nei not in visit:
                        q.append((nei, length + 1))
                        visit.add(nei)

        res = []
        for src, dst in queries:
            adj[src].append(dst)
            res.append(shortest_path())
        return res




class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        new_road = defaultdict(list)
        res = []
        for query in queries:
            u,v = query
            new_road[v].append(u)
            dp = [float("inf")]*n
            dp[0] = 0
            for i in range(1,n):
                dp[i] = dp[i-1]+1
                for j in new_road[i]:
                    dp[i] = min(dp[i],dp[j]+1)
            res.append(dp[n-1])
        return res



class Solution:
    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:

        dp = list(range(n))
        result = []
        graph = [[] for _ in range(n)]

        for i in range(n - 1):
            graph[i].append(i + 1)

        def bfs(start: int):
            q = deque([start])
            while q:
                cur = q.popleft()
                for next in graph[cur]:
                    if dp[next] > dp[cur] + 1:
                        dp[next] = dp[cur] + 1
                        q.append(next)

        for x, y in queries:
            graph[x].append(y)
            if dp[x] >= dp[y]:
                result.append(dp[n - 1])
                continue
            bfs(x)
            result.append(dp[n - 1])
        return result        
        

TestCase 1:
Input
n =
5
queries =
[[2,4],[0,2],[0,4]]
Output
[3,2,1]
Expected
[3,2,1]


TestCase 2:
Input
n =
4
queries =
[[0,3],[0,2]]
Output
[1,1]
Expected
[1,1]

