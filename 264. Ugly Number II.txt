An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.


Example 2:

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
 

Constraints:

1 <= n <= 1690


=====================================Solution=======================================

Python

class Solution:
  def nthUglyNumber(self, n: int) -> int:
    nums = [1]
    i2 = 0
    i3 = 0
    i5 = 0

    while len(nums) < n:
      next2 = nums[i2] * 2
      next3 = nums[i3] * 3
      next5 = nums[i5] * 5
      next = min(next2, next3, next5)
      if next == next2:
        i2 += 1
      if next == next3:
        i3 += 1
      if next == next5:
        i5 += 1
      nums.append(next)

    return nums[-1]


class Solution:
    def nthUglyNumber(self, n: int) -> int:
        list1 = [0] * n
        list1[0] = 1
        a = b = c = 0
        for i in range(1, n):
            list1[i] = min(list1[a] * 2, list1[b] * 3, list1[c] * 5)
            if list1[a] * 2 == list1[i]:
                a += 1
            if list1[b] * 3 == list1[i]:
                b += 1
            if list1[c] * 5 == list1[i]:
                c += 1
                
        return list1[n - 1]

TestCase 1:
Input
n =
10
Output
12
Expected
12


TestCase 2:
Input
n =
1
Output
1
Expected
1
