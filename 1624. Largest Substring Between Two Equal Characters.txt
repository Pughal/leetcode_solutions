Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aa"
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.


Example 2:

Input: s = "abca"
Output: 2
Explanation: The optimal substring here is "bc".


Example 3:

Input: s = "cbzxy"
Output: -1
Explanation: There are no characters that appear twice in s.
 

Constraints:

1 <= s.length <= 300
s contains only lowercase English letters.



===================================Solution=========================================

Python

class Solution:
  def maxLengthBetweenEqualCharacters(self, s: str) -> int:
    ans = -1
    lastSeen = {}

    for i, c in enumerate(s):
      if c not in lastSeen:
        lastSeen[c] = i
      else:
        ans = max(ans, i - lastSeen[c] - 1)

    return ans


class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        map = {}
        max_distance = -1 

        for i, c in enumerate(s):
            if c in map:
                distance = i - map[c] - 1 
                max_distance = max(max_distance, distance )
            else:
                map[c] = i
        
        return max_distance


class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        first_index = {}
        ans = -1
        
        for i in range(len(s)):
            if s[i] in first_index:
                ans = max(ans, i - first_index[s[i]] - 1)
            else:
                first_index[s[i]] = i

        return ans

TestCase 1:
Input
s =
"aa"
Output
0
Expected
0

TestCase 2:
Input
s =
"abca"
Output
2
Expected
2

TestCase 3:
Input
s =
"cbzxy"
Output
-1
Expected
-1
