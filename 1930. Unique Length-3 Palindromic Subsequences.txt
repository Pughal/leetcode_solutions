Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted 
without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")


Example 2:

Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".


Example 3:

Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")
 

Constraints:

3 <= s.length <= 10^5
s consists of only lowercase English letters.



====================================Solution========================================

Python

class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:
    
        res = 0
        uniq = set(s)
        
        for c in uniq:
            start = s.find(c) # search a character from the beginning
            end = s.rfind(c) # search a character from the last index
            
            if start < end:
                res += len(set(s[start+1:end]))
        
        return res


class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:
        '''sol 1'''
        # res = set()
        # left = set()
        # right = Counter(s)
        # for i in range(len(s)):
        #     right[s[i]] -= 1
        #     for ele in left:
        #         if right[ele] > 0:
        #             res.add((ele, s[i], ele))
        #     left.add(s[i])
        # return len(res)

        # sol 2
        res = 0
        chars = set(s)

        for char in chars:
            f = s.find(char)
            l = s.rfind(char)
            count = len(set(s[f+1:l]))
            res += count

        return res



TestCase 1:
Input
s =
"aabca"
Output
3
Expected
3

TestCase 2:
Input
s =
"adc"
Output
0
Expected
0

TestCase 3:
Input
s =
"bbcbaba"
Output
4
Expected
4
