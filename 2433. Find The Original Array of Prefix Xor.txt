You are given an integer array pref of size n. Find and return the array arr of size n that satisfies:

pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i].
Note that ^ denotes the bitwise-xor operation.

It can be proven that the answer is unique.

 

Example 1:

Input: pref = [5,2,0,3,1]
Output: [5,7,2,3,2]
Explanation: From the array [5,7,2,3,2] we have the following:
- pref[0] = 5.
- pref[1] = 5 ^ 7 = 2.
- pref[2] = 5 ^ 7 ^ 2 = 0.
- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.
- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1.


Example 2:

Input: pref = [13]
Output: [13]
Explanation: We have pref[0] = arr[0] = 13.
 

Constraints:

1 <= pref.length <= 10^5
0 <= pref[i] <= 10^6


=========================================Solution=========================================

Python

class Solution:
  def findArray(self, pref: List[int]) -> List[int]:
    ans = [0] * len(pref)

    ans[0] = pref[0]
    for i in range(1, len(ans)):
      ans[i] = pref[i] ^ pref[i - 1]

    return ans


class Solution:
    def findArray(self, pref: List[int]) -> List[int]:
        if len(pref) == 1:
            return pref

        prev = pref[0]
        for i in range(1, len(pref)):
            pref[i] = prev ^ pref[i]
            prev = prev ^ pref[i]
        return pref


class Solution:
    def findArray(self, pref: List[int]) -> List[int]:
        arr = []
        next_num = 0
        for num in pref:
            arr.append(num ^ next_num)
            next_num = num
        return arr



TestCase 1:
Input
pref =
[5,2,0,3,1]
Output
[5,7,2,3,2]
Expected
[5,7,2,3,2]

TestCase 2:
Input
pref =
[13]
Output
[13]
Expected
[13]
