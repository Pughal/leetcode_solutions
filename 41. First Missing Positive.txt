Hard


Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.

You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.


Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.


Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
 

Constraints:

1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1



=========================================Solution=============================================

Python

class Solution:
  def firstMissingPositive(self, nums: List[int]) -> int:
    n = len(nums)

    # Correct slot:
    # nums[i] = i + 1
    # nums[i] - 1 = i
    # nums[nums[i] - 1] = nums[i]
    for i in range(n):
      while nums[i] > 0 and nums[i] <= n and nums[nums[i] - 1] != nums[i]:
        nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]

    for i, num in enumerate(nums):
      if num != i + 1:
        return i + 1

    return n + 1


class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        heapq.heapify(nums)
        curr = 1
        while len(nums)>0:
            mini = heapq.heappop(nums)
            if mini == curr:
                curr += 1
        return curr

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        n = len(nums)

        # edge case 1: all nums are non-positive
        # first positive is 1
        # edge case 2: nums are 1~n, first positive is n+1
        # hence first missing possitive must be within [1, n+1]

        arr = [False] * (n+1)
        for i in nums:
            if 1 <= i <= n:
                arr[i] = True
        j = 1
        while j <= n:
            if not arr[j]:
                break
            j += 1
        return j

TestCase 1:
Input
nums =
[1,2,0]
Output
3
Expected
3

TestCase 2:
Input
nums =
[3,4,-1,1]
Output
2
Expected
2

TestCase 3:
Input
nums =
[7,8,9,11,12]
Output
1
Expected
1
