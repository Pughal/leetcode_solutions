Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.



===========================Solution===================================

Python

class Solution:
  def subsets(self, nums: List[int]) -> List[List[int]]:
    ans = []

    def dfs(s: int, path: List[int]) -> None:
      ans.append(path)

      for i in range(s, len(nums)):
        dfs(i + 1, path + [nums[i]])

    dfs(0, [])
    return ans




class Solution:
    def subsets(self, nums):
        def backtrack(start_idx, candidates, candidate, results):
            results.append(candidate.copy())
        
            for idx in range(start_idx, len(candidates)): # if you need the index use `enumerate`
                # if True:  # replace True with the dead-end condition
                #     continue
            
                candidate.append(candidates[idx])  # take
                backtrack(idx + 1, candidates, candidate, results)  # explore
                candidate.pop()  # clean up
        results = []
        candidate = []
        backtrack(0, nums, candidate, results)
        return results



class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []

        subset = []

        def dfs(i):
            if i >= len(nums):
                res.append(subset.copy())
                return
            # decision to include nums[i]
            subset.append(nums[i])
            dfs(i + 1)
            # decision NOT to include nums[i]
            subset.pop()
            dfs(i + 1)

        dfs(0)
        return res




Input
nums =
[1,2,3]
Output
[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
Expected
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Input
nums =
[0]
Output
[[],[0]]
Expected
[[],[0]]
