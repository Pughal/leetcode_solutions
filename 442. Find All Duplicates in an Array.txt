Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, 
return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]


Example 2:

Input: nums = [1,1,2]
Output: [1]


Example 3:

Input: nums = [1]
Output: []
 

Constraints:

n == nums.length
1 <= n <= 10^5
1 <= nums[i] <= n
Each element in nums appears once or twice.



================================Solution=====================================

Python


class Solution:
  def findDuplicates(self, nums: List[int]) -> List[int]:
    ans = []

    for num in nums:
      nums[abs(num) - 1] *= -1
      if nums[abs(num) - 1] > 0:
        ans.append(abs(num))

    return ans


class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        dict = {}
        arr = []
        for i in nums:
            if i in dict:
                arr.append(i)
            else:
                dict[i] = 1
        return arr


class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        c=Counter(nums)
        ls=[]
        for i,j in c.items():
            if j>=2:
                ls.append(i)
        return ls


from collections import Counter

class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        # dup = []
        # nums.sort()
        # for i in range(len(nums)-1):
        #     if nums[i] == nums[i+1]:
        #         dup.append(nums[i])
        # return dup
        # d = Counter(nums)
        # return [x for x in d if d[x]>1])
        nums.sort()
        n = len(nums)
        return [nums[i] for i in range(n) if i < n-1 and nums[i] == nums[i+1]]



class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        data = set()
        # nums.sort()
        ans = []
        for i in range(len(nums)):
            if nums[i] not in data:
                data.add(nums[i])
            else:
                ans.append(nums[i])
        ans.sort()
        
        return ans


TestCase 1:
Input
nums =
[4,3,2,7,8,2,3,1]
Output
[2,3]
Expected
[2,3]

TestCase 2:
Input
nums =
[1,1,2]
Output
[1]
Expected
[1]

TestCase 3:
Input
nums =
[1]
Output
[]
Expected
[]
