You are given a string s that consists of lowercase English letters.

A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special.

Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.


Example 2:

Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.


Example 3:

Input: s = "abcaba"
Output: 1
Explanation: The longest special substring which occurs thrice is "a": substrings "abcaba", "abcaba", and "abcaba".
It can be shown that the maximum length achievable is 1.
 

Constraints:

3 <= s.length <= 50
s consists of only lowercase English letters.



=========================================Solution=============================================

Python

class Solution:
    def maximumLength(self, s: str) -> int:
        cnt_dict = defaultdict(list)
        cnt = 0
        current_c = None
        s = s + "1"
        for c in s:
            if not current_c:
                current_c = c
            if current_c == c:
                cnt += 1
            else:
                cnt_dict[current_c].append(cnt)
                current_c = c
                cnt = 1
        ans = -1
        for k, v in cnt_dict.items():
            v = sorted(v, reverse=True)
            if v[0] > 2:
                ans = max(v[0]-2, ans)
            if len(v) >= 2 and v[0] > 1:
                    ans = max(min(v[0]-1, v[1]), ans)
            if len(v) >= 3:
                ans = max(ans, v[2])

        return ans
            




class Solution:
    def maximumLength(self, s: str) -> int:
        def isSpecial(substring):
            return len(set(substring)) == 1
        map = defaultdict(int)

        for i in range(len(s)):
            for j in range(i + 1, len(s) + 1):
                sub = s[i:j]
                if isSpecial(sub):
                    map[sub] += 1
        ans = -1
        for k, v in map.items():
            if v >= 3:
                ans = max(ans, len(k))
        return ans        




class Solution:
    def maximumLength(self, s: str) -> int:
        # Create a dictionary to store the count of all substrings.
        count = {}
        count_strings = 0
        for start in range(len(s)):
            character = s[start]
            substring_length = 0
            for end in range(start, len(s)):
                # If the string is empty, or the current character is equal to
                # the previously added character, then add it to the map.
                # Otherwise, break the iteration.
                if character == s[end]:
                    substring_length += 1
                    count[(character, substring_length)] = (
                        count.get((character, substring_length), 0) + 1
                    )
                else:
                    break

        # Create a variable ans to store the longest length of substring with
        # frequency atleast 3.
        ans = 0
        for i in count.items():
            length = i[0][1]
            if i[1] >= 3 and length > ans:
                ans = length
        if ans == 0:
            return -1
        return ans


TestCase 1:
Input
s =
"aaaa"
Output
2
Expected
2

TestCase 2:
Input
s =
"abcdef"
Output
-1
Expected
-1

TestCase 3:
Input
s =
"abcaba"
Output
1
Expected
1
