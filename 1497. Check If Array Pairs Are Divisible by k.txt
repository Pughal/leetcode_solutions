Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return true If you can find a way to do that or false otherwise.

 

Example 1:

Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).


Example 2:

Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).


Example 3:

Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.
 

Constraints:

arr.length == n
1 <= n <= 10^5
n is even.
-10^9 <= arr[i] <= 10^9
1 <= k <= 10^5




==========================================Solution=========================================

Python

class Solution:
  def canArrange(self, arr: list[int], k: int) -> bool:
    count = [0] * k

    for a in arr:
      a %= k
      count[a if a >= 0 else a + k] += 1

    return (count[0] % 2 == 0 and all(count[i] == count[k - i] for i in range(1, k // 2 + 1)))



class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        return (sum(arr) % k == 0) and min(arr) < k/2 and max(arr) > k/2
        
           
        
class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        freq = [0] * k

        for n in arr:
            target = (n % k)
            freq[target] += 1

        for i in range(len(freq)):
            if i == 0:
                if freq[i] % 2 != 0:
                    return False
            elif freq[i] != freq[k-i]:
                return False
        return True



TestCase 1:
Input
arr =
[1,2,3,4,5,10,6,7,8,9]
k =
5
Output
true
Expected
true


TestCase 2:
Input
arr =
[1,2,3,4,5,6]
k =
7
Output
true
Expected
true

TestCase 3:
Input
arr =
[1,2,3,4,5,6]
k =
10
Output
false
Expected
false
