Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 
Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-2^31 <= n <= 2^31-1
n is an integer.
Either x is not zero or n > 0.
-10^4 <= x^n <= 10^4


=======================================Solution=============================================

Python

class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n == 0:
            return 1
        if n < 0:
            return 1 / self.myPow(x, -n)
        if n & 1:
            return x * self.myPow(x, n - 1)
        return self.myPow(x * x, n // 2)


class Solution:
    def myPow(self, x: float, n: int) -> float:
        return pow(x,n)
        # return x ** n

TestCase 1:
Input
x =
2.00000
n =
10
Output
1024.00000
Expected
1024.00000

TestCase 2:
Input
x =
2.10000
n =
3
Output
9.26100
Expected
9.26100

TestCase 3:
Input
x =
2.00000
n =
-2
Output
0.25000
Expected
0.25000
