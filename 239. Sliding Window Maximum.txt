Hard


You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length


===============================================Solution============================================

Python

class Solution:
  def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
    result = []
    dq = collections.deque()  # Max queue

    for i, num in enumerate(nums):
      while dq and dq[-1] < num:
        dq.pop()
      dq.append(num)
      if i >= k and nums[i - k] == dq[0]:  # Out of bound
        dq.popleft()
      if i >= k - 1:
        result.append(dq[0])

    return result


class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        # input: array of int, window size of k, sliding left to right
        # output: return max number of each window->an array with size-k+1
        '''
        stack = []
        ans = []
        l = 0
        r = 0
        while r<len(nums):
            while len(stack)>0 and nums[r]>stack[-1]:
                stack.pop()
            stack.append(nums[r])

            if nums[l]==stack[0]:
                stack.pop(0)

            if r >= k-1:
                ans.append(stack[0])
                l+=1

            r += 1
  
        return ans
        '''

        stack = []
        for i in range(k):
            while len(stack)>0 and nums[i]>=nums[stack[-1]]:
                stack.pop()
            stack.append(i)
        ans = []
        for i in range(len(nums)-k):
            ans.append(nums[stack[0]])
            if len(stack)>0 and i>=stack[0]:
                stack.pop(0)

            while len(stack)>0 and nums[i+k]>nums[stack[-1]]:
                stack.pop()
            stack.append(i+k)

        ans.append(nums[stack[0]])
        return ans
            



TestCase 1:
Input
nums =
[1,3,-1,-3,5,3,6,7]
k =
3
Output
[3,3,5,5,6,7]
Expected
[3,3,5,5,6,7]

TestCase 2:
Input
nums =
[1]
k =
1
Output
[1]
Expected
[1]
