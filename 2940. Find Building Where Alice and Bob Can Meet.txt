Hard

You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.

If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].

You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.

Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. 
If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.

 

Example 1:

Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]
Output: [2,5,-1,5,2]
Explanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. 
In the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. 
In the third query, Alice cannot meet Bob since Alice cannot move to any other building.
In the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].
In the fifth query, Alice and Bob are already in the same building.  
For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.
For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.



Example 2:

Input: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]
Output: [7,6,-1,4,6]
Explanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].
In the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].
In the third query, Alice cannot meet Bob since Bob cannot move to any other building.
In the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].
In the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].
For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.
For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.

 

Constraints:

1 <= heights.length <= 5 * 10^^4
1 <= heights[i] <= 109
1 <= queries.length <= 5 * 10^4
queries[i] = [ai, bi]
0 <= ai, bi <= heights.length - 1



=============================================Solution=============================================

Python


class Solution:
    def leftmostBuildingQueries(self, heights, queries):
        max_idx = []  
        results = [-1] * len(queries)
        store_queries = [[] for _ in heights]

        for idx, query in enumerate(queries):
            a, b = query
            if a < b and heights[a] < heights[b]:
                results[idx] = b
            elif a > b and heights[a] > heights[b]:
                results[idx] = a
            elif a == b:
                results[idx] = a
            else:
                store_queries[max(a, b)].append(
                    (max(heights[a], heights[b]), idx)
                )

        for idx, height in enumerate(heights):
            while max_idx and max_idx[0][0] < height:
                _, q_idx = heapq.heappop(max_idx)
                results[q_idx] = idx
            for element in store_queries[idx]:
                heapq.heappush(max_idx, element)

        return results





class Solution:
    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:
        res, left_q = [0] * len(queries), []
        for i, q in enumerate(queries):
            a, b = sorted(q)
            if a == b or heights[a]< heights[b]:
                res[i] = b
            else:
                left_q.append((a, b, i))
        j, mono = len(heights) - 1, deque()

        for a,b,i in sorted(left_q, key=itemgetter(1), reverse=True):
            # constructe a monostack of idx (larger than b) of heights list
            #   such that heights increase. e.g., [2,5,3,6] -> idx of [2,5,6];
            # since we can only move to left-most and higher than max(a,b) building
            while j > b:
                while mono and heights[mono[0]] < heights[j]:
                    mono.popleft()
                mono.appendleft(j)
                j -= 1
            # k: the idx of heights[a] after inserting heights[a] to mono
            k = bisect_right(mono, heights[a], key=lambda x:heights[x])
            res[i] = -1 if k== len(mono) else mono[k]
        return res

            
        





TestCase 1:
Input
heights =
[6,4,8,5,2,7]
queries =
[[0,1],[0,3],[2,4],[3,4],[2,2]]
Output
[2,5,-1,5,2]
Expected
[2,5,-1,5,2]

TestCase 2:
Input
heights =
[5,3,8,2,6,1,4,6]
queries =
[[0,7],[3,5],[5,2],[3,0],[1,6]]
Output
[7,6,-1,4,6]
Expected
[7,6,-1,4,6]

