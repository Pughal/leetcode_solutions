Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
 

Constraints:

1 <= n <= 10^5
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.
 

Follow up:

How can we prove that at least one duplicate number must exist in nums?
Can you solve the problem in linear runtime complexity?



===================================Solution=====================================

Python

class Solution:
  def findDuplicate(self, nums: List[int]) -> int:
    slow = nums[nums[0]]
    fast = nums[nums[nums[0]]]

    while slow != fast:
      slow = nums[slow]
      fast = nums[nums[fast]]

    slow = nums[0]

    while slow != fast:
      slow = nums[slow]
      fast = nums[fast]

    return slow


class Solution:
    def findDuplicate(self, nums: List[int]) -> int:

        dup = set()
        for num in nums:
            if num in dup:
                return num
            else:
                dup.add(num)
        return None


class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        # O(nlogn), sort and scan

        # Linear
        target = 0

        # Check nums[0] is dup
        # for i in nums[1:]:
        #     if i == nums[0]:
        #         return i

        while True:
            if nums[target] == 0:
                return target
            nums[target], target = 0, nums[target]


TestCase 1:
Input
nums =
[1,3,4,2,2]
Output
2
Expected
2

TestCase 2:
Input
nums =
[3,1,3,4,2]
Output
3
Expected
3

