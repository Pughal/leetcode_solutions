The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:

"../" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).
"./" : Remain in the same folder.
"x/" : Move to the child folder named x (This folder is guaranteed to always exist).
You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.

The file system starts in the main folder, then the operations in logs are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.

 

Example 1:



Input: logs = ["d1/","d2/","../","d21/","./"]
Output: 2
Explanation: Use this change folder operation "../" 2 times and go back to the main folder.


Example 2:



Input: logs = ["d1/","d2/","./","d3/","../","d31/"]
Output: 3


Example 3:

Input: logs = ["d1/","../","../","../"]
Output: 0
 

Constraints:

1 <= logs.length <= 10^3
2 <= logs[i].length <= 10
logs[i] contains lowercase English letters, digits, '.', and '/'.
logs[i] follows the format described in the statement.
Folder names consist of lowercase English letters and digits.


=============================Solution=================================

Python

class Solution:
    def minOperations(self, logs: list[str]) -> int:
        paths_stack: list[str] = []

        for log in logs:
            if log == "../":
                if paths_stack:
                    paths_stack.pop()
            elif log != "./":
                paths_stack.append(log)

        return len(paths_stack)


class Solution:
    def minOperations(self, logs: List[str]) -> int:
        
        # a variable to keep track of the moves
        move = 0

        # Iterate through each operation in the logs
        for operation in logs:
            
            # If the operation is to move to the parent folder ("../")
            if operation == "../":
                
                # Decrement the move variable by 1 if it's greater than 0
                move -= 1 if move > 0 else 0
                
            # If the operation is to remain in the same folder ("./"), do nothing
            elif operation == "./":
                pass
            
            # If the operation is to move to a child folder ("x/"), increment the move variable by 1
            else:
                move += 1
        
        # Return the final value of the move variable, representing the minimum number of operations
        return move


class Solution:
    def minOperations(self, logs: List[str]) -> int:
        counter = 0

        for op in logs:
            if op == "../":
                if counter != 0:
                    counter -= 1
            elif op == "./":
                continue
            else:
                counter += 1

        return counter



TestCase 1:
Input
logs =
["d1/","d2/","../","d21/","./"]
Output
2
Expected
2

TestCase 2:
Input
logs =
["d1/","d2/","./","d3/","../","d31/"]
Output
3
Expected
3

TestCase 3:
Input
logs =
["d1/","../","../","../"]
Output
0
Expected
0
