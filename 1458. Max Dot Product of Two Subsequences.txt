Hard


Given two arrays nums1 and nums2.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array 
by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. 
(ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).

 

Example 1:

Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.
Their dot product is (2*3 + (-2)*(-6)) = 18.


Example 2:

Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
Their dot product is (3*7) = 21.


Example 3:

Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
Their dot product is -1.
 

Constraints:

1 <= nums1.length, nums2.length <= 500
-1000 <= nums1[i], nums2[i] <= 1000


========================================Solution========================================

Python

class Solution:
  def maxDotProduct(self, A: List[int], B: List[int]) -> int:
    m = len(A)
    n = len(B)
    # dp[i][j] := max dot product of two subseqs nums[0..i) and nums2[0..j)
    dp = [[-math.inf] * (n + 1) for _ in range(m + 1)]

    for i in range(m):
      for j in range(n):
        dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j], max(0, dp[i][j]) + A[i] * B[j])

    return dp[m][n]



# let dp[i][j] be the maximum dot product between subsequences of nums1[:i] and nums2[:j].
# dp[i][0] = dp[0][j] = 0
# then dp[i + 1][j + 1] = max(nums1[i] * nums2[j] + dp[i][j], dp[i + 1][j], dp[i][j + 1])
# this can be done with O(n) memory.

class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        if len(nums1) < len(nums2):
            nums1, nums2 = nums2, nums1
        dp = [0] * (len(nums2) + 1)
        # # i + 1 + j + 1 == k
        # for k in range(2, len(nums1) + len(nums2) + 1):
        #     # we need j = k - i - 2 >= 0
        #     # so i <= k - 2..
        #     # but also i <= len(nums1)
        #     # and j <= len(nums2) ie k - i - 2 <= len(nums2)
        #     # so i >= k - 2 - len(nums2)
        #     for i in range(max(0, k - 2 - len(nums2)), min(k - 1, len(nums1) + 1)):
        #         j = k - i - 2
        for i in range(len(nums1)):
            new_dp = [0] * (len(nums2) + 1)
            for j in range(len(nums2)):
                #print(i + 1, j + 1, dp[i + 1][j], dp[i][j + 1])
                new_dp[j + 1] = max(dp[j], nums1[i] * nums2[j] + dp[j], new_dp[j], dp[j + 1])
            dp = new_dp
        #list(map(print, dp))
        res = dp[-1]
        if res == 0:
            if 0 in nums1 or 0 in nums2:
                return 0
            if nums1[0] > 0:
                nums1, nums2 = nums2, nums1
            return max(nums1) * min(nums2)
        return res


class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        if max(nums1) < 0 and min(nums2) > 0:
            return max(nums1) * min(nums2)
        
        if min(nums1) > 0 and max(nums2) < 0:
            return min(nums1) * max(nums2)
        
        m = len(nums2) + 1
        prev_dp = [0] * m
        dp = [0] * m
        
        for i in range(len(nums1) - 1, -1, -1):
            dp = [0] * m
            for j in range(len(nums2) - 1, -1, -1):
                use = nums1[i] * nums2[j] + prev_dp[j + 1]
                dp[j] = max(use, prev_dp[j], dp[j + 1])
            
            prev_dp = dp
        
        return dp[0]


TestCase 1:
Input
nums1 =
[2,1,-2,5]
nums2 =
[3,0,-6]
Output
18
Expected
18

TestCase 2:
Input
nums1 =
[3,-2]
nums2 =
[2,-6,7]
Output
21
Expected
21

TestCase 3:
Input
nums1 =
[-1,-1]
nums2 =
[1,1]
Output
-1
Expected
-1
