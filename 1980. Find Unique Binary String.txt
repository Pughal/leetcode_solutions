Given an array of strings nums containing n unique binary strings each of length n, 
return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.


Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.


Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 

Constraints:

n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.



===============================Solution==================================

Python

class Solution:
  def findDifferentBinaryString(self, nums: List[str]) -> str:
    return ''.join('1' if num[i] == '0' else '0' for i, num in enumerate(nums))


class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
         return "".join(["1" if nums[i][i] == "0" else "0" for i in range(len(nums))])


class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        the_bag = set(nums)
        n = len(nums)

        # because of pigeon hole, you will only need to search at most n+1
        def backtrack(curr_path):
            if len(curr_path)==n:
                curr_str = ''.join(curr_path)
                if curr_str not in the_bag:
                    return curr_str
                else:
                    return None    
            for c in ['0', '1']:
                curr_path.append(c)
                res = backtrack(curr_path)
                if res != None:
                    return res
                curr_path.pop()
            return None    
        
        return backtrack([])


TestCase 1:
Input
nums =
["01","10"]
Output
"11"
Expected
"00"

TestCase 2:
Input
nums =
["00","01"]
Output
"10"
Expected
"10"

TestCase 3:
Input
nums =
["111","011","001"]
Output
"000"
Expected
"000"
