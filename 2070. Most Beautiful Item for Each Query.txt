You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.

You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. 
If no such item exists, then the answer to this query is 0.

Return an array answer of the same length as queries where answer[j] is the answer to the jth query.

 

Example 1:

Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]
Output: [2,4,5,5,6,6]
Explanation:
- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.
- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. 
  The maximum beauty among them is 4.
- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].
  The maximum beauty among them is 5.
- For queries[4]=5 and queries[5]=6, all items can be considered.
  Hence, the answer for them is the maximum beauty of all items, i.e., 6.



Example 2:

Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]
Output: [4]
Explanation: 
The price of every item is equal to 1, so we choose the item with the maximum beauty 4. 
Note that multiple items can have the same price and/or beauty.  


Example 3:

Input: items = [[10,1000]], queries = [5]
Output: [0]
Explanation:
No item has a price less than or equal to 5, so no item can be chosen.
Hence, the answer to the query is 0.
 

Constraints:

1 <= items.length, queries.length <= 10^5
items[i].length == 2
1 <= pricei, beautyi, queries[j] <= 10^9



=============================================Solution==============================================

Python

class Solution:
  def maximumBeauty(self, items: list[list[int]], queries: list[int],) -> list[int]:
    prices, beauties = zip(*sorted(items))
    maxBeautySoFar = [0] * (len(beauties) + 1)

    for i, beauty in enumerate(beauties):
      maxBeautySoFar[i + 1] = max(maxBeautySoFar[i], beauty)

    return [maxBeautySoFar[bisect_right(prices, query)] for query in queries]


class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        qs = [(queries[i], i) for i in range(len(queries))]
        qs.sort()

        res = [0] * len(queries)
        heapq.heapify(items)

        b = 0
        for q in qs:
            while len(items) > 0 and items[0][0] <= q[0]:
                b = max(b, items[0][1])
                heapq.heappop(items)
            res[q[1]] = b
        return res



class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        answer = []
        items.sort(key=lambda x: x[1], reverse = True)

        for query in queries:
            
            for item in items:
                if item[0] <= query:
                    answer.append(item[1])
                    break
            else:
                answer.append(0)

        return answer


TestCase 1:
Input
items =
[[1,2],[3,2],[2,4],[5,6],[3,5]]
queries =
[1,2,3,4,5,6]
Output
[2,4,5,5,6,6]
Expected
[2,4,5,5,6,6]

TestCase 2:
Input
items =
[[1,2],[1,2],[1,3],[1,4]]
queries =
[1]
Output
[4]
Expected
[4]


TestCase 3:
Input
items =
[[10,1000]]
queries =
[5]
Output
[0]
Expected
[0]
