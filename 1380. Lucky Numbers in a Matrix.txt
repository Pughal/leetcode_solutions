Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5.
All elements in the matrix are distinct.



=======================================Solution=======================================

Python

class Solution:
  def luckyNumbers(self, matrix: List[List[int]]) -> List[int]:
    for row in matrix:
      minIndex = row.index(min(row))
      if row[minIndex] == max(list(zip(*matrix))[minIndex]):
        return [row[minIndex]]
    return []


class Solution:
    @staticmethod
    def luckyNumbers(matrix: list[list[int]]) -> list[int]:        
        # row mins
        rmin = [min(x) for x in matrix]
        # col maxs
        cmax = [max(x) for x in zip(*matrix)]
        return list(set(rmin) & set(cmax))



class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        transpose = [[matrix[i][j] for i in range(len(matrix))] for j in range(len(matrix[0]))]
        lucky_numbers = []
        for i in range(len(matrix)):
            row_min = min(matrix[i])
            for j in range(len(matrix[0])):
                if matrix[i][j] == row_min and matrix[i][j] == max(transpose[j]):
                    lucky_numbers.append(matrix[i][j])
        return lucky_numbers



TestCase 1:
Input
matrix =
[[3,7,8],[9,11,13],[15,16,17]]
Output
[15]
Expected
[15]

TestCase 2:
Input
matrix =
[[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output
[12]
Expected
[12]

TestCase 3:
Input
matrix =
[[7,8],[1,2]]
Output
[7]
Expected
[7]
