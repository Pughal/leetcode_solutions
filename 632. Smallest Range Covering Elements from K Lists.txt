You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:

Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].


Example 2:

Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
 

Constraints:

nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-10^5 <= nums[i][j] <= 10^5
nums[i] is sorted in non-decreasing order.


=======================================Solution===========================================

Python

class Solution:
  def smallestRange(self, nums: list[list[int]]) -> list[int]:
    minHeap = [(row[0], i, 0) for i, row in enumerate(nums)]
    heapq.heapify(minHeap)

    maxRange = max(row[0] for row in nums)
    minRange = heapq.nsmallest(1, minHeap)[0][0]
    ans = [minRange, maxRange]

    while len(minHeap) == len(nums):
      num, r, c = heapq.heappop(minHeap)
      if c + 1 < len(nums[r]):
        heapq.heappush(minHeap, (nums[r][c + 1], r, c + 1))
        maxRange = max(maxRange, nums[r][c + 1])
        minRange = heapq.nsmallest(1, minHeap)[0][0]
        if maxRange - minRange < ans[1] - ans[0]:
          ans[0], ans[1] = minRange, maxRange

    return ans



class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        ans = [-10000000, 10000000]
        heap = []
        maxv = nums[0][0]
        for i in range(len(nums)):
            heappush(heap, (nums[i][0], i))
            maxv = max(maxv, nums[i][0])

        while heap:
            cur = heappop(heap)

            if ans[1] - ans[0] > maxv - cur[0]:
                ans = [cur[0], maxv]
            
            nums[cur[1]] = nums[cur[1]][1:]

            if len(nums[cur[1]]) == 0:
                break
            
            maxv = max(maxv, nums[cur[1]][0])  
            heappush(heap, (nums[cur[1]][0], cur[1]))


        return ans



class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        # Priority queue to store (value, list index, element index)
        heap = []
        max_val = float("-inf")
        range_start = float("-inf")
        range_end = float("inf")

        # Insert the first element from each list into the min-heap
        for i in range(len(nums)):
            heappush(heap, (nums[i][0], i, 0))
            max_val = max(max_val, nums[i][0])

        # Continue until we can't proceed further
        while len(heap) == len(nums):
            min_val, row, col = heapq.heappop(heap)

            # Update the smallest range
            if max_val - min_val < range_end - range_start:
                range_start = min_val
                range_end = max_val

            # If possible, add the next element from the same row to the heap
            if col + 1 < len(nums[row]):
                next_val = nums[row][col + 1]
                heapq.heappush(heap, (next_val, row, col + 1))
                max_val = max(max_val, next_val)

        return [range_start, range_end]
        
        



TestCase 1:
Input
nums =
[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output
[20,24]
Expected
[20,24]


TestCase 2:
Input
nums =
[[1,2,3],[1,2,3],[1,2,3]]
Output
[1,1]
Expected
[1,1]
