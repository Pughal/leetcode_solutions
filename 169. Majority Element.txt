Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3


Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 10^4
-10^9 <= nums[i] <= 10^9
 

Follow-up: Could you solve the problem in linear time and in O(1) space?



==================================Solution=======================================

Python

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = 0
        candidate = 0
        
        for num in nums:
            if count == 0:
                candidate = num
            
            if num == candidate:
                count += 1
            else:
                count -= 1
        
        return candidate


class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return nums[0]
        nums.sort()
        pos = ((len(nums) - 1) // 2)
        return nums[pos]



class Solution:
  def majorityElement(self, nums: List[int]) -> int:
    #Boyer_Moore alg 
    ans = None
    count = 0
    for num in nums:
      if count == 0:
        ans = num
      count += (1 if num == ans else -1)

    return ans

class Solution:
    def majorityElement(self, a: List[int]) -> int:
        return mode(a)

TestCase 1:
Input
nums =
[3,2,3]
Output
3
Expected
3

TestCase 2:
Input
nums =
[2,2,1,1,1,2,2]
Output
2
Expected
2
