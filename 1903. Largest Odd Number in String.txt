You are given a string num, representing a large integer. 
Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: num = "52"
Output: "5"
Explanation: The only non-empty substrings are "5", "2", and "52". "5" is the only odd number.


Example 2:

Input: num = "4206"
Output: ""
Explanation: There are no odd numbers in "4206".


Example 3:

Input: num = "35427"
Output: "35427"
Explanation: "35427" is already an odd number.
 

Constraints:

1 <= num.length <= 10^5
num only consists of digits and does not contain any leading zeros.



====================================Solution======================================

Python

class Solution:
  def largestOddNumber(self, num: str) -> str:
    for i, n in reversed(list(enumerate(num))):
      if int(n) & 1:
        return num[:i + 1]
    return ''

class Solution:
    def largestOddNumber(self, num: str) -> str:
        odd = "13579"
        oddSet = set(odd)
        n = len(num)
        for i in range(n-1, -1, -1):
            if num[i] in oddSet:
                return num[:i+1]
        return ""


class Solution:
    def largestOddNumber(self, num: str) -> str:
        ans=""
        for i in  range(len(num)-1,-1,-1):
            if int(num[i])%2!=0:
                ans=num[:i+1]
                break
        return ans
            

TestCase 1:
Input
num =
"52"
Output
"5"
Expected
"5"

TestCase 2:
Input
num =
"4206"
Output
""
Expected
""

TestCase 3:
Input
num =
"35427"
Output
"35427"
Expected
"35427"
