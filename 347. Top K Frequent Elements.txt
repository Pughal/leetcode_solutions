Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 
Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 
Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.


==========================================Solution============================================

Python

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        freq_table = {}
        for i in nums:
            freq_table[i] = freq_table.get(i, 0) + 1
        heap = []
        for i in freq_table.keys():
            if len(heap) == k: # If size is k then we dont want to increase the size further 
                heappushpop(heap, (freq_table[i], i))
            else: # Size is not k then freely push values
                heappush(heap, (freq_table[i], i))
		# After this operation the heap contains only k largest values of all the values in nums
        ans = []
        while k > 0:
            k -= 1
            ans.append(heappop(heap)[1])
        return ans


class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        hashmap = {}
        for i in nums:
            hashmap[i] = 1+hashmap.get(i, 0)
        return heapq.nlargest(k, hashmap, key=hashmap.get)

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        return [val[0] for val in Counter(nums).most_common(k)]

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        
        while len(set(nums))>k:
            for i in set(nums):
                nums.remove(i)
        return list(set(nums))
        """
        count = collections.defaultdict(0)
        for i in nums:
            count[i]+=1
            """
        
        
        
TestCase 1:
Input
nums = [1,1,1,2,2,3]
k = 2
Output
[2,1]
Expected
[1,2]

TestCase 2:
Input
nums = [1]
k = 1
Output
[1]
Expected
[1]
