You are given two strings s and t consisting of only lowercase English letters.

Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:

Input: s = "coaching", t = "coding"
Output: 4
Explanation: Append the characters "ding" to the end of s so that s = "coachingding".
Now, t is a subsequence of s ("coachingding").
It can be shown that appending any 3 characters to the end of s will never make t a subsequence.


Example 2:

Input: s = "abcde", t = "a"
Output: 0
Explanation: t is already a subsequence of s ("abcde").


Example 3:

Input: s = "z", t = "abcde"
Output: 5
Explanation: Append the characters "abcde" to the end of s so that s = "zabcde".
Now, t is a subsequence of s ("zabcde").
It can be shown that appending any 4 characters to the end of s will never make t a subsequence.
 

Constraints:

1 <= s.length, t.length <= 105
s and t consist only of lowercase English letters.


================================Solution================================

Python

class Solution:
  def appendCharacters(self, s: str, t: str) -> int:
    i = 0  # t's index

    for c in s:
      if c == t[i]:
        i += 1
        if i == len(t):
          return 0

    return len(t) - i

class Solution:
    def appendCharacters(self, s: str, t: str) -> int:
        it = iter(s)
        matching_count = sum(1 for char in t if char in it)
        return len(t) - matching_count


class Solution:
    def appendCharacters(self, s: str, t: str) -> int:
        first = 0
        longest_prefix = 0

        while first < len(s) and longest_prefix < len(t):
            if s[first] == t[longest_prefix]:
                # Since at the current position both the characters are equal,
                # increment longest_prefix by 1
                longest_prefix += 1
            first += 1

        # The number of characters appended is given by the difference in length of t
        # and longest_prefix
        return len(t) - longest_prefix



TestCase 1:
Input
s =
"coaching"
t =
"coding"
Output
4
Expected
4


TestCase 2:
Input
s =
"abcde"
t =
"a"
Output
0
Expected
0


TestCase 3:
Input
s =
"z"
t =
"abcde"
Output
5
Expected
5
