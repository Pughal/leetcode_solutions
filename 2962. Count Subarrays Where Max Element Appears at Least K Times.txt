You are given an integer array nums and a positive integer k.

Return the number of subarrays where the maximum element of nums appears at least k times in that subarray.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,2,3,3], k = 2
Output: 6
Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].


Example 2:

Input: nums = [1,4,2,1], k = 3
Output: 0
Explanation: No subarray contains the element 4 at least 3 times.
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^6
1 <= k <= 10^5




========================================Solution=============================================

Python

class Solution:
  def countSubarrays(self, nums: List[int], k: int) -> int:
    maxNum = max(nums)
    ans = 0
    count = 0

    l = 0
    for r, num in enumerate(nums):
      if num == maxNum:
        count += 1

      while count == k:
        if nums[l] == maxNum:
          count -= 1
        l += 1

      ans += l

    return ans


class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        # Find the highest value in the nums array
        high = max(nums)
        count = 0
        answer = 0
        left = 0
        n = len(nums)
        
        # Iterate through the array with right pointer
        for right in range(n):
            # Increment count if current element is the maximum
            if nums[right] == high:
                count += 1
            
            # As long as the count of maximum element is at least k,
            # calculate possible subarrays that can be formed and adjust left pointer
            while count >= k:
                answer += n - right  # Adding possible subarrays including the current window
                if nums[left] == high:
                    count -= 1  # Decrement count as the left-most occurrence of max is removed
                left += 1  # Shrink the window from the left
        
        return answer



class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        n = len(nums)
        if n < k:   return 0
        mx, inds = max(nums), [-1]
        for i,num in enumerate(nums):
            if num == mx:   inds.append(i)
        return sum((n-idx)*(inds[i]-inds[i-1]) for i,idx in enumerate(inds[k:],1))


TestCase 1:
Input
nums =
[1,3,2,3,3]
k =
2
Output
6
Expected
6

TestCase 2:
Input
nums =
[1,4,2,1]
k =
3
Output
0
Expected
0
