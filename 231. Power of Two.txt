Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1


Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16


Example 3:

Input: n = 3
Output: false
 

Constraints:

-2^31 <= n <= 2^31 - 1
 

Follow up: Could you solve it without loops/recursion?



========================================Solution=============================================

Python

class Solution:
  def isPowerOfTwo(self, n: int) -> bool:
    return False if n < 0 else bin(n).count('1') == 1


class Solution:
  def isPowerOfTwo(self, n: int) -> bool:
    return False if n <= 0 else 2 ** int(log(n, 2)) == n

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        return n>0 and n&(n-1)==0

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        while n % 2 == 0 and n > 2:
            n = n // 2
        return True if n==1 or n==2 else False
            
        

TestCase 1:
Input
n =
1
Output
true
Expected
true

TestCase 2:
Input
n =
16
Output
true
Expected
true

TestCase 3:
Input
n =
3
Output
false
Expected
false
