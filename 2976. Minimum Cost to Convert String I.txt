You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. 
You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i].

You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y.

Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.

Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].

 

Example 1:

Input: source = "abcd", target = "acbe", original = ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost = [2,5,5,1,2,20]
Output: 28
Explanation: To convert the string "abcd" to string "acbe":
- Change value at index 1 from 'b' to 'c' at a cost of 5.
- Change value at index 2 from 'c' to 'e' at a cost of 1.
- Change value at index 2 from 'e' to 'b' at a cost of 2.
- Change value at index 3 from 'd' to 'e' at a cost of 20.
The total cost incurred is 5 + 1 + 2 + 20 = 28.
It can be shown that this is the minimum possible cost.


Example 2:

Input: source = "aaaa", target = "bbbb", original = ["a","c"], changed = ["c","b"], cost = [1,2]
Output: 12
Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. 
To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.


Example 3:

Input: source = "abcd", target = "abce", original = ["a"], changed = ["e"], cost = [10000]
Output: -1
Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.
 

Constraints:

1 <= source.length == target.length <= 10^5
source, target consist of lowercase English letters.
1 <= cost.length == original.length == changed.length <= 2000
original[i], changed[i] are lowercase English letters.
1 <= cost[i] <= 10^6
original[i] != changed[i]


===================================Solution===================================

Python


class Solution:
  def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
    ans = 0
    # dist[u][v] := the minimum distance to change ('a' + u) to ('a' + v)
    dist = [[math.inf] * 26 for _ in range(26)]

    for a, b, c in zip(original, changed, cost):
      u = ord(a) - ord('a')
      v = ord(b) - ord('a')
      dist[u][v] = min(dist[u][v], c)

    for k in range(26):
      for i in range(26):
        if dist[i][k] < math.inf:
          for j in range(26):
            if dist[k][j] < math.inf:
              dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    for s, t in zip(source, target):
      if s == t:
        continue
      u = ord(s) - ord('a')
      v = ord(t) - ord('a')
      if dist[u][v] == math.inf:
        return -1
      ans += dist[u][v]

    return ans



class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
        MAX = float('inf')
        graph = [[MAX]*26 for _ in range(26)]
        ordA = ord('a')
        originalSet,changedSet = set(),set()
        for x,y,c in zip(original,changed,cost):
            ordX,ordY = ord(x)-ordA,ord(y)-ordA
            graph[ordX][ordY] = min(graph[ordX][ordY],c)
            originalSet.add(ordX)
            changedSet.add(ordY)
            commonSet = originalSet.intersection(changedSet)

        for k in commonSet:
            for i in originalSet:
                for j in changedSet:
                    graph[i][j] = min(graph[i][j],graph[i][k]+graph[k][j]) 
        res = 0
        for s,t in zip(source,target):
            if s == t: continue
            ordS,ordT = ord(s)-ordA,ord(t)-ordA
            if graph[ordS][ordT] == MAX: return -1
            res+=graph[ordS][ordT]
        return res         



def floydWarshall(dist, V):
    for k in range(V):
        for i in range(V):
            for j in range(V):
                dist[i][j] = min(dist[i][j],
                                 dist[i][k] + dist[k][j]
                                 )

class Solution:
    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:
        target = (ord(i) - 97 for i in target)
        source = (ord(i) - 97 for i in source)
        adj_matrix = [[float('inf')] * 26 for _ in range(26)]
        for i in range(len(cost)):
            adj_matrix[ord(original[i]) - 97][ord(changed[i]) - 97] = min(cost[i], adj_matrix[ord(original[i]) - 97][ord(changed[i]) - 97])
        floydWarshall(adj_matrix, 26)
        res = sum(
            (0 if i == v else adj_matrix[i][v]) for i,v in zip(source, target)
        )
        return res if res != float('inf') else -1 

TestCase 1:
Input
source =
"abcd"
target =
"acbe"
original =
["a","b","c","c","e","d"]
changed =
["b","c","b","e","b","e"]
cost =
[2,5,5,1,2,20]
Output
28
Expected
28

TestCase 2:
Input
source =
"aaaa"
target =
"bbbb"
original =
["a","c"]
changed =
["c","b"]
cost =
[1,2]
Output
12
Expected
12


TestCase 3:
Input
source =
"abcd"
target =
"abce"
original =
["a"]
changed =
["e"]
cost =
[10000]
Output
-1
Expected
-1
