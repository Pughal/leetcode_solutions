Hard


For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].

Given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. 
Since the answer can be huge, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, k = 0
Output: 1
Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.

Example 2:

Input: n = 3, k = 1
Output: 2
Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.
 

Constraints:

1 <= n <= 1000
0 <= k <= 1000



===================================Solution=======================================

Python

class Solution:
  def kInversePairs(self, n: int, k: int) -> int:
    kMod = 1_000_000_007
    dp = [[0] * (k + 1) for _ in range(n + 1)]

    for i in range(n + 1):
      dp[i][0] = 1

    for i in range(1, n + 1):
      for j in range(1, k + 1):
        dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % kMod
        if j - i >= 0:
          dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + kMod) % kMod

    return dp[n][k]


class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        M = 1000000007
        if k == 0:
            return 1
        if n == 1:
            return 1 if k == 0 else 0
        current_count = [0] * (k + 1)
        current_count[0] = 1
        previous_count = [0] * (k + 1)
        for i in range(n - 2, -1, -1):
            total_count = 0
            threshold = n - i
            for j in range(0, k + 1):
                total_count += current_count[j]
                if j >= threshold:
                    total_count -= current_count[j - threshold]
                total_count %= M
                previous_count[j] = total_count
            current_count, previous_count = previous_count, current_count
        return current_count[k]


class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        last_row = [1] + [0] * 1000
        mod = 1000000007

        for i in range(2,n+1):
            next_row = [1] + [0] * 1000
            for j in range(1, i):
                next_row[j] = (next_row[j-1] + last_row[j]) % mod
            for j in range(i, min(1001, i*(i-1) // 2+1)):
                next_row[j] = (next_row[j-1] + last_row[j] - last_row[j-i]) % mod
            last_row = next_row
        return last_row[k]




TestCase 1:
Input
n =
3
k =
0
Output
1
Expected
1

TestCase 2:
Input
n =
3
k =
1
Output
2
Expected
2
