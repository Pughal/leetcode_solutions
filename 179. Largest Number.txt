Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"


Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 10^9



=================================Solution===================================

Python

class LargerStrKey(str):
  def __lt__(x: str, y: str) -> bool:
    return x + y > y + x

class Solution:
  def largestNumber(self, nums: list[int]) -> str:
    return ''.join(sorted(map(str, nums), key=LargerStrKey)).lstrip('0') or '0'



class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        # convert to string so we can compare
        for i, n in enumerate(nums):
            nums[i] = str(n)
        
        def compare(n1: str, n2: str):
            if n1 + n2 > n2 + n1:
                return -1
            else:
                return 1

        nums = sorted(nums, key=cmp_to_key(compare))
        return str(int("".join(nums)))



class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        # Convert each integer to a string
        num_strings = [str(num) for num in nums]

        # Sort strings based on concatenated values
        num_strings.sort(key=lambda a: a * 10, reverse=True)

        # Handle the case where the largest number is zero
        if num_strings[0] == "0":
            return "0"

        # Concatenate sorted strings to form the largest number
        return "".join(num_strings)

TestCase 1:
Input
nums =
[10,2]
Output
"210"
Expected
"210"

TestCase 2:
Input
nums =
[3,30,34,5,9]
Output
"9534330"
Expected
"9534330"
