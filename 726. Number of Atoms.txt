Given a string formula representing a chemical formula, return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.

For example, "H2O" and "H2O2" are possible, but "H1O2" is impossible.
Two formulas are concatenated together to produce another formula.

For example, "H2O2He3Mg4" is also a formula.
A formula placed in parentheses, and a count (optionally added) is also a formula.

For example, "(H2O2)" and "(H2O2)3" are formulas.
Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), 
followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

The test cases are generated so that all the values in the output fit in a 32-bit integer.

 

Example 1:

Input: formula = "H2O"
Output: "H2O"
Explanation: The count of elements are {'H': 2, 'O': 1}.


Example 2:

Input: formula = "Mg(OH)2"
Output: "H2MgO2"
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.


Example 3:

Input: formula = "K4(ON(SO3)2)2"
Output: "K4N2O14S4"
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.
 

Constraints:

1 <= formula.length <= 1000
formula consists of English letters, digits, '(', and ')'.
formula is always valid.


============================Solution==============================

Python

class Solution:
    def countOfAtoms(self, s: str) -> str:
        def is_digit(c):
            return '0' <= c <= '9'
        
        def is_upper(c):
            return 'A' <= c <= 'Z'
        
        def is_lower(c):
            return 'a' <= c <= 'z'
        
        n = len(s)
        stk = []
        i = 0
        
        while i < n:
            if s[i] == '(':
                stk.append((s[i], 0))
                i += 1
            elif s[i] == ')':
                i += 1
                mul = 0
                while i < n and is_digit(s[i]):
                    mul = mul * 10 + int(s[i])
                    i += 1
                if mul == 0:
                    mul = 1
                
                temp = []
                while stk and stk[-1][0] != '(':
                    name, count = stk.pop()
                    count *= mul
                    temp.append((name, count))
                stk.pop()  # Remove '('
                
                for name, count in temp:
                    stk.append((name, count))
            else:
                if i + 1 < n and is_lower(s[i + 1]):
                    name = s[i] + s[i + 1]
                    i += 2
                else:
                    name = s[i]
                    i += 1
                
                count = 0
                while i < n and is_digit(s[i]):
                    count = count * 10 + int(s[i])
                    i += 1
                if count == 0:
                    count = 1
                
                stk.append((name, count))
        
        # Reconstruct the result
        mp = {}
        for name, count in stk:
            mp[name] = mp.get(name, 0) + count
        
        result = []
        for name, count in sorted(mp.items()):
            result.append(name)
            if count > 1:
                result.append(str(count))
        
        return ''.join(result)




class Solution:
    def countOfAtoms(self, formula: str) -> str:
        def parse_formula(formula):
            stack = [collections.defaultdict(int)]
            i, n = 0, len(formula)
            
            while i < n:
                if formula[i] == '(':
                    stack.append(collections.defaultdict(int))
                    i += 1
                elif formula[i] == ')':
                    i += 1
                    start = i
                    while i < n and formula[i].isdigit():
                        i += 1
                    multiplier = int(formula[start:i] or 1)
                    top = stack.pop()
                    for elem, cnt in top.items():
                        stack[-1][elem] += cnt * multiplier
                else:
                    start = i
                    i += 1
                    while i < n and formula[i].islower():
                        i += 1
                    elem = formula[start:i]
                    start = i
                    while i < n and formula[i].isdigit():
                        i += 1
                    count = int(formula[start:i] or 1)
                    stack[-1][elem] += count
            
            return stack[0]
    
        element_counts = parse_formula(formula)
        sorted_elements = sorted(element_counts.items())
        result = []
        
        for elem, count in sorted_elements:
            result.append(elem)
            if count > 1:
                result.append(str(count))
        
        return ''.join(result)



class Solution:
    def countOfAtoms(self, formula: str) -> str:
        
        N = len(formula)
        stack = [defaultdict(int)]
        i = 0
        
        while i < N:
            if formula[i] == '(':
                stack.append(defaultdict(int))
                i += 1
            elif formula[i] == ')':
                top = stack.pop()
                i += 1
                i_start = i
                while i < N and formula[i].isdigit():
                    i += 1
                multiplicity = int(formula[i_start:i] or 1)
                for name, v in top.items():
                    stack[-1][name] += v*multiplicity
            else:
                i_start = i
                i += 1
                while i < N and formula[i].islower(): 
                    i += 1
                name = formula[i_start: i]
                i_start = i
                while i < N and formula[i].isdigit():
                    i += 1
                multiplicity = int(formula[i_start:i] or 1)
                stack[-1][name] += multiplicity
            
        return "".join(name + (str(stack[-1][name]) if stack[-1][name] > 1 else '') for name in sorted(stack[-1]))


TestCase 1:
Input
formula =
"H2O"
Output
"H2O"
Expected
"H2O"


TestCase 2:
Input
formula =
"Mg(OH)2"
Output
"H2MgO2"
Expected
"H2MgO2"

TestCase 3:
Input
formula =
"K4(ON(SO3)2)2"
Output
"K4N2O14S4"
Expected
"K4N2O14S4"
