A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:

Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.


Example 2:

Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.


Example 3:

Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.
 

Constraints:

1 <= nums.length <= 10^5
nums[i] is either 0 or 1.



====================================Solution=======================================

Python

class Solution:
  def minSwaps(self, nums: List[int]) -> int:
    n = len(nums)
    k = nums.count(1)
    ones = 0  
    maxOnes = 0  

    for i in range(n * 2):
      if i >= k and nums[i % n - k]:  
        ones -= 1
      if nums[i % n]:
        ones += 1
      maxOnes = max(maxOnes, ones)

    return k - maxOnes


class Solution:
    def minSwaps(self, nums: List[int]) -> int:

#         Let's denote the number of ones in the array nums with k.
# Then we need to find a circular subarray of nums, of length k such that its fill is maximal. The reason is that, if we choose that window to place all ones into, 
# then the number of swaps is exactly k - the number of ones in that window.

        k = sum(nums)
        ones = sum(nums[-k:])
        max_fill = ones
        for i in range(len(nums)):
            ones += nums[i]-nums[i-k]
            if ones > max_fill:
                max_fill = ones
        return k - max_fill

          
        
class Solution:
    def minSwaps(self, nums: List[int]) -> int:
        n = len(nums)
        window_size = sum(nums)
        one_cnt = sum(nums[n-window_size:n])
        res = window_size-one_cnt
        for i in range(n-1, -1, -1):
            one_cnt += nums[i-window_size]-nums[i]
            res = min(res, window_size-one_cnt)
        return res


TestCase 1:
Input
nums =
[0,1,0,1,1,0,0]
Output
1
Expected
1


TestCase 2:
Input
nums =
[0,1,1,1,0,0,1,1,0]
Output
2
Expected
2

TestCase 3:
Input
nums =
[1,1,0,0,1]
Output
0
Expected
0
