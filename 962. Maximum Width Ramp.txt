A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

 

Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.


Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.
 

Constraints:

2 <= nums.length <= 5 * 10^4
0 <= nums[i] <= 5 * 10^4



======================================Solution=========================================

Python

class Solution:
  def maxWidthRamp(self, nums: list[int]) -> int:
    ans = 0
    stack = []

    for i, num in enumerate(nums):
      if stack == [] or num <= nums[stack[-1]]:
        stack.append(i)

    for i, num in reversed(list(enumerate(nums))):
      while stack and num >= nums[stack[-1]]:
        ans = max(ans, i - stack.pop())

    return ans


class Solution:
    def maxWidthRamp(self, nums: List[int]) -> int:
        stack = []
        n = len(nums)
        max_width = 0
        
        for i in range(n):
            if not stack or nums[stack[-1]] > nums[i]:
                stack.append(i)
        
        for j in range(n-1, -1, -1):
            while stack and nums[stack[-1]] <= nums[j]:
                max_width = max(max_width, j - stack.pop())
        
        return max_width


class Solution:
    def maxWidthRamp(self, nums: List[int]) -> int:
        arr = []
        result = 0
        for i in range(len(nums)):
            if len(arr) == 0 or nums[i] < nums[arr[-1]]:
                arr.append(i)
            start, end = 0, len(arr)-1
            index = 0
            while start <= end:
                mid = (start + end) // 2
                if nums[arr[mid]] <= nums[i]:
                    index = arr[mid]
                    end = mid - 1
                else:
                    start = mid + 1
            result = max(result, i - index)
        return result






TestCase 1:
Input
nums =
[6,0,8,2,1,5]
Output
4
Expected
4


TestCase 2:
Input
nums =
[9,8,1,0,1,9,4,0,4,1]
Output
7
Expected
7
