Given a string s, partition s such that every substringof the partition is a palindrome. 

Return all possible palindrome partitioning of s.


Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.


------------------------------------Solution--------------------------------------
Python

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        result = []

        def isPalindrome(s: str) -> bool:
            return s == s[::-1]
        
        def dfs(s: str, j:int, path:List[str], result:List[List[str]]):
            if j == len(s):
                result.append(path)
                return
            
            for i in range(j, len(s)):
                if isPalindrome(s[j: i+1]):
                    dfs(s, i+1, path + [s[j:i+1]], result)
        
        dfs(s, 0 , [], result)
        return result

if __name__ == "__main__":
    s = "aab"
    soln = Solution()
    print(soln.partition(s)
    


TestCase 1:
Input:
s = "aab"
Output:
[["a","a","b"],["aa","b"]]
Expected:
[["a","a","b"],["aa","b"]]

TestCase 2:
Input:
s = "a"
Output:
[["a"]]
Expected:
[["a"]]

