Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. 
Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.


Example 2:

Input: arr = [11,81,94,43,3]
Output: 444
 

Constraints:

1 <= arr.length <= 3 * 10^4
1 <= arr[i] <= 3 * 10^4


===============================Solution==================================

Python

class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        MOD = 10**9 + 7
        stack = []
        sumOfMinimums = 0

        for i in range(len(arr) + 1):
            while stack and (i == len(arr) or arr[stack[-1]] >= arr[i]):
                mid = stack.pop()
                leftBoundary = stack[-1] if stack else -1
                rightBoundary = i

                count = (mid - leftBoundary) * (rightBoundary - mid) % MOD

                sumOfMinimums += (count * arr[mid]) % MOD
                sumOfMinimums %= MOD
            stack.append(i)

        return int(sumOfMinimums)


class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        # E.g., [3, 1, 2, 5, 4]
        # [3]
        # [3,1] [1]
        # [3,1,2] [1,2] [2]
        # [3,1,2,5] [1,2,5] [2,5] [5]
        # [3,1,2,5,4] [1,2,5,4] [2,5,4] [5,4] [4]

        arr = [0] + arr
        stack = [0]
        ans = [0] * len(arr)

        for i in range(len(arr)):
            while arr[stack[-1]] > arr[i]:
                stack.pop()
            j = stack[-1]
            ans[i] = ans[j] + (i-j)*arr[i]
            stack.append(i)
        
        return sum(ans) % (10**9 + 7)



TestCase 1:
Input
arr =
[3,1,2,4]
Output
17
Expected
17

TestCase 2:
Input
arr =
[11,81,94,43,3]
Output
444
Expected
444
