There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. 
A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. 
If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

 

Example 1:

Input: tickets = [2,3,2], k = 2
Output: 6
Explanation: 
- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].
- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.


Example 2:

Input: tickets = [5,1,1,1], k = 0
Output: 8
Explanation:
- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].
- In the next 4 passes, only the person in position 0 is buying tickets.
The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.
 

Constraints:

n == tickets.length
1 <= n <= 100
1 <= tickets[i] <= 100
0 <= k < n




======================================Solution=========================================

Python

class Solution:
  def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
    ans = 0

    for i, ticket in enumerate(tickets):
      if i <= k:
        ans += min(ticket, tickets[k])
      else:
        ans += min(ticket, tickets[k] - 1)

    return ans

class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        return sum(min(t, tickets[k]) for t in tickets[:k]) + tickets[k] + sum(min(t, tickets[k] - 1) for t in tickets[k+1:])

from collections import deque
class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        queue = deque(tickets)
        
        seconds = 0

        while queue[k] != 0:
            if queue[k] == 1 and k == 0:
                return seconds + 1

            queue[0] -= 1
            seconds += 1

            if queue[0] == 0:
                queue.popleft()
            else: 
                queue.append(queue.popleft())
                
            if k == 0:
                k = len(queue) - 1
                continue

            k -= 1





TestCase 1:
Input
tickets =
[2,3,2]
k =
2
Output
6
Expected
6

TestCase 2:
Input
tickets =
[5,1,1,1]
k =
0
Output
8
Expected
8
