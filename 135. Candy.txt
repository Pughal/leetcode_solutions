Hard


There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 10^4
0 <= ratings[i] <= 2 * 10^4


=========================================Solution============================================

Python

class Solution:
  def candy(self, ratings: List[int]) -> int:
    n = len(ratings)

    ans = 0
    l = [1] * n
    r = [1] * n

    for i in range(1, n):
      if ratings[i] > ratings[i - 1]:
        l[i] = l[i - 1] + 1

    for i in range(n - 2, -1, -1):
      if ratings[i] > ratings[i + 1]:
        r[i] = r[i + 1] + 1

    for a, b in zip(l, r):
      ans += max(a, b)

    return ans


class Solution:
    def candy(self, ratings):
        number = len(ratings)
        candies = [1] * number

        for i in range(1, number):
            if ratings[i] > ratings[i-1]:
                candies[i] = candies[i-1] + 1
 
        for i in range(number-2, -1, -1):
            if ratings[i] > ratings[i+1] and candies[i] <= candies[i+1]:
                candies[i] = candies[i+1] + 1

        return sum(candies)


class Solution:
    def candy(self, ratings: List[int]) -> int:
        if len(ratings) == 1: return 1

        # convert the ratings into whether they are increasing or decreasing or equal
        for index in range(1, len(ratings)):
            if ratings[index] < ratings[index-1]:   # if decreasing
                ratings[index-1] = -1
            elif ratings[index] > ratings[index-1]: # if increasing
                ratings[index-1] = 1
            else:                                   # if equal
                ratings[index-1] = 0

        candies_given = 1
        group_length = 1
        group_direction = 0
        previous_peak = 1       # the previous peak of the increasing section

        # read the directional section
        for index in range(len(ratings)-1):
            direction = ratings[index]

            if direction == 0:  # if same, reset the group
                group_length = 1
                candies_given += 1
                group_direction = 0
            # When not the same:
            # Increasing: the height of the new child will be the size of the children in the group
            # Decreasing: the height of the new child will be one, but all previous children will get one more
            # Changing direction: Increasing will include the previous but decreasing only includes previous
            # if it has to be added to to be valid
            else:   
                if direction != group_direction:    # if changing direction
                    group_direction = direction     # set the new direction

                    # if changing to decreasing, mark the peak so it gets conditionally raised
                    if direction == -1:
                        previous_peak = group_length

                    # reset the group length, and the increasing section includes previous
                    group_length = 0 if direction == -1 else 1
                
                # add the current number to the group
                group_length += 1

                # if a decreasing group reaches the height of the peak, push the peak up as well
                if direction == -1 and group_length >= previous_peak:
                    candies_given += 1

                # push up the current group
                candies_given += group_length

        return candies_given


            


TestCase 1:
Input
ratings =
[1,0,2]
Output
5
Expected
5

TestCase 2:
Input
ratings =
[1,2,2]
Output
4
Expected
4
