Hard

Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.

Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".

Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".
 

Constraints:
1 <= s.length <= 500
s consists of lowercase English letters.

----------------------------------------------------Solution-----------------------------------------------------------

Python


class Solution:
  def minInsertions(self, s: str) -> int:
    return len(s) - self._longestPalindromeSubseq(s)

  def _longestPalindromeSubseq(self, s: str) -> int:
    n = len(s)
    # dp[i][j] := LPS's length in s[i..j]
    dp = [[0] * n for _ in range(n)]

    for i in range(n):
      dp[i][i] = 1

    for d in range(1, n):
      for i in range(n - d):
        j = i + d
        if s[i] == s[j]:
          dp[i][j] = 2 + dp[i + 1][j - 1]
        else:
          dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])

    return dp[0][n - 1]

class Solution:
    def minInsertions(self, s: str) -> int:
        # @lru_cache(None)
        # def dp(i, j):
            
        #     while i < j and s[i] == s[j]:
        #         i += 1
        #         j -= 1
        #     if i >= j: return 0
        #     return min(dp(i + 1, j), dp(i, j - 1)) + 1
        # return dp(0, len(s) - 1)
        def isPalindrome(s):
            return s == s[::-1]
        
        if isPalindrome(s):
            return 0
        
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        
        for i in range(n):
            dp[i][i] = 1
        
        for i in range(n-2, -1, -1):
            for j in range(i+1, n):
                if s[i] == s[j]:
                    dp[i][j] = dp[i+1][j-1] + 2
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        
        return n - dp[0][-1]

TestCase 1:
Input
s = "zzazz"
Output
0
Expected
0

TestCase 2:
Input
s ="mbadm"
Output
2
Expected
2

TestCase 3:
Input
s = "leetcode"
Output
5
Expected
5
