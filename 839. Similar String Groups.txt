Hard

Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.

For example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts".

Together, these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}.  
Notice that "tars" and "arts" are in the same group even though they are not similar.  
Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?

 

Example 1:

Input: strs = ["tars","rats","arts","star"]
Output: 2

Example 2:

Input: strs = ["omv","ovm"]
Output: 1
 

Constraints:

1 <= strs.length <= 300
1 <= strs[i].length <= 300
strs[i] consists of lowercase letters only.
All words in strs have the same length and are anagrams of each other.


----------------------------------------------Solution---------------------------------------------------------

Python

class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        groups = 0
        n = len(strs)
        vis = [False] * n
        for i in range(n):
            if vis[i]: continue
            groups += 1
            self.dfs(i, strs, vis)
        return groups

    def dfs(self, i: int, strs: List[str], vis: List[bool]) -> None:
        vis[i] = True
        for j in range(len(strs)):
            if vis[j]: continue
            if self.is_similar(strs[i], strs[j]):
                self.dfs(j, strs, vis)

    def is_similar(self, a: str, b: str) -> bool:
        count = 0
        for i in range(len(a)):
            if a[i] != b[i]: count += 1
        return count == 2 or count == 0


class UnionFind:
    def __init__(self, size: int):
        self.size = size
        self.root = list(range(size))
        self.ranks = [1] * size
        self.n_groups = size
    
    def find(self, v: int) -> int:
        r = self.root[v]
        if r == v: return v
        res = self.find(r)
        self.root[v] = res
        return res
    
    def union(self, v1: int, v2: int) -> None:
        r1 = self.find(v1)
        r2 = self.find(v2)
        if r1 == r2: return
        self.n_groups -= 1
        if self.ranks[r2] > self.ranks[r1]:
            r1, r2 = r2, r1
        elif self.ranks[r1] == self.ranks[r2]:
            self.ranks[r1] += 1
        self.root[r2] = r1
    
    def isConnected(self, v1, v2) -> bool:
        return self.find(v1) == self.find(v2)

class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        n = len(strs)
        uf = UnionFind(n)
        for i1, s1 in enumerate(strs):
            for i2 in range(i1 + 1, n):
                s2 = strs[i2]
                diff_count = 0
                for l1, l2 in zip(s1, s2):
                    if l1 != l2:
                        if diff_count == 2: break
                        diff_count += 1
                else:
                    uf.union(i1, i2)
        return uf.n_groups

class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        def is_similar(s1: str, s2: str) -> bool:
            if s1 == s2:
                return True
            diff = 0
            for c1, c2 in zip(s1, s2):
                if c1 != c2:
                    diff += 1
                if diff > 2:
                    return False
            return diff == 2
        
        graph = {s: [] for s in strs}
        for i in range(len(strs)):
            for j in range(i + 1, len(strs)):
                if is_similar(strs[i], strs[j]):
                    graph[strs[i]].append(strs[j])
                    graph[strs[j]].append(strs[i])
        
        visited = set()
        num_groups = 0
        for s in strs:
            if s not in visited:
                num_groups += 1
                stack = [s]
                while stack:
                    node = stack.pop()
                    if node not in visited:
                        visited.add(node)
                        stack.extend(graph[node])
        
        return num_groups
        
        
        
TestCase 1:
Input
strs = ["tars","rats","arts","star"]
Output
2
Expected
2

TestCase 2:
Input
strs = ["omv","ovm"]
Output
1
Expected
1
