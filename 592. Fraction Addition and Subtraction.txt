Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. 
So in this case, 2 should be converted to 2/1.

 

Example 1:

Input: expression = "-1/2+1/2"
Output: "0/1"


Example 2:

Input: expression = "-1/2+1/2+1/3"
Output: "1/3"


Example 3:

Input: expression = "1/3-1/2"
Output: "-1/6"
 

Constraints:

The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
Each fraction (input and output) has the format Â±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.
The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. 
If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.
The number of given fractions will be in the range [1, 10].
The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.



==========================================Solution========================================

Python

class Solution:
  def fractionAddition(self, expression: str) -> str:
    ints = list(map(int, re.findall('[+-]?[0-9]+', expression)))
    A = 0
    B = 1

    for a, b in zip(ints[::2], ints[1::2]):
      A = A * b + a * B
      B *= b
      g = math.gcd(A, B)
      A //= g
      B //= g

    return str(A) + '/' + str(B)


from fractions import Fraction
import re
from math import gcd

class Solution:
    def fractionAddition(self, expression: str) -> str:
        # Find all fractions in the expression
        fractions = re.findall(r'[+-]?\d+/\d+', expression)

        print(fractions)
        
        # Initialize result as zero
        result = Fraction(0, 1)
        
        # Sum all fractions
        for frac in fractions:
            result += Fraction(frac)
        
        # Simplify the result
        numerator = result.numerator
        denominator = result.denominator
        
        # Return the fraction in string format
        return f"{numerator}/{denominator}"




class Solution:
    def fractionAddition(self, expression: str) -> str:
        def lcm(x, y):
            return x * y // gcd(x, y)
        
        # Split the expression into individual fractions using regular expressions
        fractions = re.findall(r'[+-]?\d+/\d+', expression)
        
        # Initialize result fraction as 0/1
        num_res, denom_res = 0, 1
        
        # Iterate over each fraction in the expression
        for frac in fractions:
            num, denom = map(int, frac.split('/'))
            
            # Find the least common multiple of the current denominator and the new fraction's denominator
            lcm_denom = lcm(denom_res, denom)
            
            # Adjust numerators to the common denominator and sum them
            num_res = num_res * (lcm_denom // denom_res) + num * (lcm_denom // denom)
            denom_res = lcm_denom
            
            # Simplify the resulting fraction by dividing both the numerator and denominator by their GCD
            common_gcd = gcd(num_res, denom_res)
            num_res //= common_gcd
            denom_res //= common_gcd
        
        # Return the result in the form "numerator/denominator"
        return f"{num_res}/{denom_res}"


TestCase 1:
Input
expression =
"-1/2+1/2"
Output
"0/1"
Expected
"0/1"


TestCase 2:
Input
expression =
"-1/2+1/2+1/3"
Output
"1/3"
Expected
"1/3"

TestCase 3:
Input
expression =
"1/3-1/2"
Output
"-1/6"
Expected
"-1/6"
