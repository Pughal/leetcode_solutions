You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. 
  Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.
 

Constraints:

0 <= start < end <= 10^9
At most 1000 calls will be made to book.



======================================Solution=======================================

Python


class MyCalendar:
  def __init__(self):
    self.timeline = []

  def book(self, start: int, end: int) -> bool:
    for s, e in self.timeline:
      if max(start, s) < min(end, e):
        return False
    self.timeline.append((start, end))
    return True   


# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)





class MyCalendar:

    def __init__(self):
        self.bookings = [ (-1,-1), (float('inf'), float('inf')) ]

    def book(self, start: int, end: int) -> bool:
        # Use bisect to efficiently find the insertion point for the new booking's end date
        index = bisect_left(self.bookings, (start, end))

        # Check for clash with previous booking (if any)
        if start < self.bookings[index - 1][1]:
            return False

        # Check for clash with next booking (if any)
        if end > self.bookings[index][0]:
            return False

        # No clash found, insert the new booking at the appropriate position
        self.bookings.insert(index, (start, end))
        return True


class MyCalendar:

    def __init__(self):
        self.ans = []

    def book(self, start: int, end: int) -> bool:
        for s,e in self.ans:
            if max(start,s) < min(end,e):
                return False
        
        self.ans.append((start,end))
        return True 

    

# Your MyCalendar object will be instantiated and called as such:
# obj = MyCalendar()
# param_1 = obj.book(start,end)




TestCase 1:
Input
["MyCalendar","book","book","book"]
[[],[10,20],[15,25],[20,30]]
Output
[null,true,false,true]
Expected
[null,true,false,true]
