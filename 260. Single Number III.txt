Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. 
You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.


Example 2:

Input: nums = [-1,0]
Output: [-1,0]


Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 10^4
-2^31 <= nums[i] <= 2^31 - 1
Each integer in nums will appear twice, only two integers will appear once.




================================Solution===================================

Python

class Solution:
  def singleNumber(self, nums: List[int]) -> List[int]:
    xors = functools.reduce(operator.xor, nums)
    lowbit = xors & -xors
    ans = [0, 0]

    # Seperate `nums` into two groups by `lowbit`.
    for num in nums:
      if num & lowbit:
        ans[0] ^= num
      else:
        ans[1] ^= num

    return ans


class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        ans = set()
        for n in nums:
            if n in ans:
                ans.remove(n)
            else:
                ans.add(n)
        return list(ans)


class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        fin = []
        for i in nums:
            if nums.count(i) == 1:
                fin.append(i)
        return fin

TestCase 1:
Input
nums =
[1,2,1,3,2,5]
Output
[3,5]
Expected
[3,5]

TestCase 2:
Input
nums =
[-1,0]
Output
[-1,0]
Expected
[-1,0]

TestCase 3:
Input
nums =
[0,1]
Output
[1,0]
Expected
[1,0]
