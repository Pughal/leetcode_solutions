You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.

 

Example 1:

Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").


Example 2:

Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.
 

Constraints:

1 <= s.length <= 10^5
s[i] is 'a' or 'b'​​.


======================================Solution============================================

Python

class Solution:
  def minimumDeletions(self, s: str) -> int:
    dp = 0  
    countB = 0

    for c in s:
      if c == 'a':
        dp = min(dp + 1, countB)
      else:
        countB += 1

    return dp


class Solution:
    def minimumDeletions(self, s):
        ans, count = 0, 0
        for i in s:
            if i == 'b':
                count += 1
            elif count:
                ans += 1
                count -= 1
        return ans


class Solution:
    def minimumDeletions(self, s: str) -> int:
        
        count_b = 0
        total_a = s.count('a')
        min_deletions = total_a # Start with the assumption that we might delete all 'a's

        for char in s:
            if char == 'a':
                total_a -= 1
            else:
                count_b += 1

            # Deletions needed to remove all 'a's seen so far plus all 'b's to the right
            min_deletions = min(min_deletions, count_b + total_a)

        return min_deletions


TestCase 1:
Input
s =
"aababbab"
Output
2
Expected
2


TestCase 2:
Input
s =
"bbaaaaabb"
Output
2
Expected
2
