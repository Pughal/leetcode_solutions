Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. 
For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.


Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.
 

Constraints:

1 <= n <= 10^4


=================================Solution==================================

Python

class Solution:
  def numSquares(self, n: int) -> int:
    dp = [n] * (n + 1)  
    dp[0] = 0  
    dp[1] = 1 
    
    for i in range(2, n + 1):
      j = 1
      while j * j <= i:
        dp[i] = min(dp[i], dp[i - j * j] + 1)
        j += 1

    return dp[n]



class Solution:
    def numSquares(self, n: int) -> int:
        # Nice Approach 2nd fastest
        # if n <= 0:
        #     return 0
        #
        # cnt_perfect_square = [0]
        #
        # while len(cnt_perfect_square) <= n:
        #     m = len(cnt_perfect_square)
        #     cnt_square = sys.maxsize
        #     for i in range(1, int(math.sqrt(m)) + 1):
        #         cnt_square = min(cnt_square, cnt_perfect_square[m - i * i] + 1)
        #     cnt_perfect_square.append(cnt_square)
        # return cnt_perfect_square[n]

        # We can Use Langrage's 4 Square theorem to do this in very efficient manner
        def is_perfect_square(n):
            square_root = int(math.sqrt(n))
            return square_root**2 == n
        
        cpy_n = n
        if is_perfect_square(n):
            return 1
        # 4^k(8m + 7) if in this way a num. can be represented then it's a sum of 4 square nums.
        while n & 3 == 0:    # divisible by 4
            n >>= 2           # divide by 4
        if n & 7 == 7:       # n & 7 ---> n % 8 == 0  and n & 7 == 7 means n % 8 == 7
            return 4
        n = cpy_n
        for i in range(1, int(math.sqrt(n)) + 1):
            if is_perfect_square(n - i*i):
                return 2
        return 3



TestCase 1:
Input
n =
12
Output
3
Expected
3

TestCase 2:
Input
n =
13
Output
2
Expected
2
