Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.


Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.


Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length, text2.length <= 1000
text1 and text2 consist of only lowercase English characters.



===================================Solution=======================================

Python

class Solution:
  def longestCommonSubsequence(self, text1: str, text2: str) -> int:
    m = len(text1)
    n = len(text2)
    # dp[i][j] := the length of LCS(text1[0..i), text2[0..j))
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m):
      for j in range(n):
        dp[i + 1][j + 1] = \
            1 + dp[i][j] if text1[i] == text2[j] \
            else max(dp[i][j + 1], dp[i + 1][j])

    return dp[m][n]



class Solution:
        
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:

      @cache
      def f(i1, i2):
        if i1 < 0 or i2 < 0:
          return 0
        if text1[i1] == text2[i2]:
          return 1 + f(i1-1, i2-1)
        else:
          return max(f(i1-1, i2), f(i1, i2-1))
      return f(len(text1)-1, len(text2)-1)

    # O(MN), O(MN). DP
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
      n1 = len(text1)
      n2 = len(text2)
      
      dp = [[0] * (n2+1) for _ in range(n1+1)]
      for r in range(1, n1+1):
        for c in range(1, n2+1):
            # r and c are shifted by one compared to string indices
          if text1[r-1] == text2[c-1]:
            dp[r][c] = 1 + dp[r-1][c-1]
          else:
            dp[r][c] = max(dp[r][c-1], dp[r-1][c])
      return dp[n1][n2]
    
    # O(MN), O(min(M,N)). DP + optimized space
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        if len(text2) < len(text1):
            text1, text2 = text2, text1
        n1 = len(text1)
        n2 = len(text2)
        
        dp_curr = [0] * (n2 + 1)
        dp_prev = [0] * (n2 + 1)
        # dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]
        for r in range(1, n1+1):
          for c in range(1, n2+1):
            # r and c are shifted by one compared to string indices
            if text1[r-1] == text2[c-1]:
              dp_curr[c] = 1 + dp_prev[c-1]
            else:
              dp_curr[c] = max(dp_curr[c-1], dp_prev[c])
          dp_curr, dp_prev = [0] * (n2 + 1), dp_curr
        return dp_prev[n2]
        
    

TestCase 1:
Input
text1 =
"abcde"
text2 =
"ace"
Output
3
Expected
3

TestCase 2:
Input
text1 =
"abc"
text2 =
"abc"
Output
3
Expected
3

TestCase 3:
Input
text1 =
"abc"
text2 =
"def"
Output
0
Expected
0
