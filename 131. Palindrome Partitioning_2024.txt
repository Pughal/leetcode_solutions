Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]


Example 2:

Input: s = "a"
Output: [["a"]]
 

Constraints:

1 <= s.length <= 16
s contains only lowercase English letters.



============================Solution=============================


class Solution:
    def partition(self, s: str) -> List[List[str]]:      
        dp = [[] for _ in range(len(s))]
        for i in range(len(s)-1, -1, -1):
            for j in range(i, len(s)):
                substr = s[i:j+1]
                if substr[::-1] == substr:
                    next_ = dp[j+1] if j+1 < len(s) else [()]
                    for k in next_:
                        dp[i].append((substr,)+k)

        return dp[0]
                    


class Solution:
    def __init__(self):
        self.ans = {}
        
    def partition(self, s: str) -> List[List[str]]:
        if(s in self.ans):
            return self.ans[s]
        
        if(len(s) == 0):
             result = [[]]
        elif(len(s) == 1):
             result = [[s]]
        else:
            result = []
            for i in range(1, len(s) + 1):  
                left = []
                if(s[:i] == "".join(reversed(s[:i]))):
                    left.append([s[:i]])

                right = self.partition(s[i:])

                for l in left:
                    for r in right:
                        result.append(l + r)
        
        self.ans[s] = result
        return result
        


TestCase 1:
Input
s =
"aab"
Output
[["a","a","b"],["aa","b"]]
Expected
[["a","a","b"],["aa","b"]]

TestCase 2:
Input
s =
"a"
Output
[["a"]]
Expected
[["a"]]
