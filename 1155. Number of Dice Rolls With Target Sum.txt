You have n dice, and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, 
so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.


Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.


Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.
 

Constraints:

1 <= n, k <= 30
1 <= target <= 1000



=====================================Solution==================================

Python

class Solution:
  def numRollsToTarget(self, n: int, k: int, target: int) -> int:
    kMod = 1_000_000_007
    dp = [1] + [0] * target

    for _ in range(n):  # n dices
      newDp = [0] * (target + 1)
      for i in range(1, k + 1):  # numbers 1, 2, ..., f
        for t in range(i, target + 1):  # all the possible targets
          newDp[t] += dp[t - i]
          newDp[t] %= kMod
      dp = newDp

    return dp[target]


class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:

        if target>n*k: # the target is too large
            return 0
        # dp array starts with 1 for any number less than k since we can roll that immediately
        dp = [[int(i<k) for i in range(target)]] + [[0]*target for _ in range(n-1)] 
        for i in range(1,n): # up until n
            for j in range(min(k*(i+1),target)): # to the end of what can be reached with i dice rolls
                dp[i][j] += sum(dp[i-1][max(0,j-k):j]) # we can reach the sum j from any number between j-k and j-1
        return dp[-1][-1]%(10**9+7) # return the answer mod 10^9+7


class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        mod = 10**9+7
        arr = [0]*(target+1)
        arr[0] = 1
        for i in range(n):
            for t in range(target,-1,-1):
                if(t > 0):
                    arr[t] = sum(arr[max(t-k,0):t]) % mod
                else:
                    arr[t] = 0
        return arr[target]
                
        

TestCase 1:
Input
n =
1
k =
6
target =
3
Output
1
Expected
1

TestCase 2:
Input
n =
2
k =
6
target =
7
Output
6
Expected
6

TestCase 3:
Input
n =
30
k =
30
target =
500
Output
222616187
Expected
222616187
