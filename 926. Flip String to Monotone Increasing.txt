A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.

Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.

Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.
 
Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.


--------------------------------------------Solution----------------------------------------
Python

class Solution:
    def minFlipsMonoIncr(self, s: str) -> int:
        flip = [0] *2
        for i, c in enumerate(s):
            flip[0], flip[1] = flip[0] + (c == '1'), min(flip[0], flip[1]) + (c == '0')

        return min(flip[0], flip[1])


if __name__ == "__main__":
    s = "00110"
    soln = Soln()
    print(soln.minFlipsMonoIncr(s))
    


TestCase 1:
Input:
s = "00110"
Output:
1
Expected:
1

TestCase 2:
Input:
s = "010110"
Output:
2
Expected:
2

TestCase 3:
Input:
s = "00011000"
Output:
2
Expected:
2
