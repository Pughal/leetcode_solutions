Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:

Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.

Example 2:

Input: grid = [[3,2],[1,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
-100 <= grid[i][j] <= 100
 

Follow up: Could you find an O(n + m) solution?

=================================Solution===================================

Python

class Solution:
  def countNegatives(self, grid: List[List[int]]) -> int:
    m = len(grid)
    n = len(grid[0])
    ans = 0
    i = m - 1
    j = 0

    while i >= 0 and j < n:
      if grid[i][j] < 0:
        ans += n - j
        i -= 1
      else:
        j += 1

    return ans

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        count = 0
        for i in grid:
            for j in range(-1, -len(i)-1, -1):
                if i[j] < 0:
                    count += 1
                else:
                    break
        return count

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        r = 0
        c = len(grid[0])-1
        l = len(grid)
        count=0
        while c>=0 and r<l:
            if grid[r][c]<0:
                count+=(l-r)
                c-=1
            else:
                r+=1
        return count

        
        

TestCase 1:
Input
grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output
8
Expected
8

TestCase 2:
Input
grid = [[3,2],[1,0]]
Output
0
Expected
0
