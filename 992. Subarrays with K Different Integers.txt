Hard


Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]


Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 10^4
1 <= nums[i], k <= nums.length



=========================================Solution==============================================

Python

class Solution:
  def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
    def subarraysWithAtMostKDistinct(k: int) -> int:
      ans = 0
      count = collections.Counter()

      l = 0
      for r, num in enumerate(nums):
        count[num] += 1
        if count[num] == 1:
          k -= 1
        while k < 0:
          count[nums[l]] -= 1
          if count[nums[l]] == 0:
            k += 1
          l += 1
        ans += r - l + 1  # nums[l..r], nums[l + 1..r], ..., nums[r]

      return ans

    return subarraysWithAtMostKDistinct(k) - subarraysWithAtMostKDistinct(k - 1)



from collections import Counter

class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        def countAtMostK(nums, k):
            if k == 0:
                return 0
            i = res = 0
            counter = Counter()
            
            for j in range(len(nums)):
                # Increment the count of the current element in the counter
                counter[nums[j]] += 1
                
                # If the number of distinct elements exceeds k, move the left pointer and decrease the count
                while len(counter) > k:
                    counter[nums[i]] -= 1
                    if counter[nums[i]] == 0:
                        del counter[nums[i]]  # If the count becomes zero, remove the element from the counter
                    i += 1
                    
                # Update the result by adding the length of the subarray from i to j
                res += j - i + 1
                
            return res
        
        # The number of subarrays with exactly k distinct elements is the difference between
        # the number of subarrays with at most k distinct elements and the number of subarrays
        # with at most k-1 distinct elements
        return countAtMostK(nums, k) - countAtMostK(nums, k - 1)



class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:\
        # using 3 pointer: l,m,r
        # m is in the middle which [l,r] is the longest with k unique, and [m,r] is the shortest with k unqiue
        # so the number of substring will be m-l+1
        count = [0] * (len(nums) + 1)
        out, l, m = 0, 0, 0

        for n in nums:
            count[n] += 1
            # if reached an n that is first time added ( unique), k-1
            if count[n] == 1:
                k -= 1
                # if k less than 0, means exceed max, changed nums[m] count to 0, to remove it
                # getting the l right
                if k < 0:
                    count[nums[m]] = 0
                    m += 1
                    l = m
            # m need to keep moving to make the next element become only 1, i,e: shortest k unique
            if k <= 0:
                while count[nums[m]] > 1:
                    count[nums[m]] -= 1
                    m += 1
                out += m-l+1

        return out


        



TestCase 1:
Input
nums =
[1,2,1,2,3]
k =
2
Output
7
Expected
7

TestCase 2:
Input
nums =
[1,2,1,3,4]
k =
3
Output
3
Expected
3
