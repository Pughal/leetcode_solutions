Hard


You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:

Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.


Example 2:

Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1
 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 10^5
All the values of routes[i] are unique.
sum(routes[i].length) <= 10^5
0 <= routes[i][j] < 10^6
0 <= source, target < 10^6


========================================Solution=======================================

Python

class Solution:
  def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
    if source == target:
      return 0

    graph = collections.defaultdict(list)
    usedBuses = set()

    for i in range(len(routes)):
      for route in routes[i]:
        graph[route].append(i)

    ans = 0
    q = collections.deque([source])

    while q:
      ans += 1
      for _ in range(len(q)):
        for bus in graph[q.popleft()]:
          if bus in usedBuses:
            continue
          usedBuses.add(bus)
          for nextRoute in routes[bus]:
            if nextRoute == target:
              return ans
            q.append(nextRoute)

    return -1


class Solution:
    """
    Time Complexity: O(M * N) for construction of the graph where M is the number of routes and N is the total number of bus stops;
    similiarly, BFS looks at all stops within each route, at the worst case also O(M * N)
    Space Complexity: O(M * N) the queue and set may need to store all stops of all routes.
    """
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        # create a graph where the key is the stop, and value is a list of indices of routes who have this stop
        graph = defaultdict(set)
        for route_idx, stops in enumerate(routes):
            for stop in stops:
                graph[stop].add(route_idx)
        
        # queue maintains the state (where we're at, the number of route changed we've made)
        queue = deque([(source, 0)])
        visited_stops = set([source])
        visited_routes = set()

        while queue:
            stop, num_changes = queue.popleft()
            if stop == target:
                return num_changes
            
            for route_idx in graph[stop]: # for all routes who passes through the current stop
                if route_idx not in visited_routes: # if I haven't seen this route, add it
                    visited_routes.add(route_idx) 

                    for stop in routes[route_idx]:
                        if stop not in visited_stops: # enqueue all unseen stops that are part of this unseen route
                            visited_stops.add(stop)
                            queue.append((stop, num_changes + 1))
        return -1


TestCase 1:
Input
routes =
[[1,2,7],[3,6,7]]
source =
1
target =
6
Output
2
Expected
2

TestCase 2:
Input
routes =
[[7,12],[4,5,15],[6],[15,19],[9,12,13]]
source =
15
target =
12
Output
-1
Expected
-1
