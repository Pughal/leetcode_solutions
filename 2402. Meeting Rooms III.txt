You are given an integer n. There are n rooms numbered from 0 to n - 1.

You are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). 
All the values of starti are unique.

Meetings are allocated to rooms in the following manner:

Each meeting will take place in the unused room with the lowest number.
If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the same duration as the original meeting.
When a room becomes unused, meetings that have an earlier original start time should be given the room.
Return the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.

A half-closed interval [a, b) is the interval between a and b including a and not including b.

 

Example 1:

Input: n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]
Output: 0
Explanation:
- At time 0, both rooms are not being used. The first meeting starts in room 0.
- At time 1, only room 1 is not being used. The second meeting starts in room 1.
- At time 2, both rooms are being used. The third meeting is delayed.
- At time 3, both rooms are being used. The fourth meeting is delayed.
- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).
- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).
Both rooms 0 and 1 held 2 meetings, so we return 0. 



Example 2:

Input: n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]
Output: 1
Explanation:
- At time 1, all three rooms are not being used. The first meeting starts in room 0.
- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.
- At time 3, only room 2 is not being used. The third meeting starts in room 2.
- At time 4, all three rooms are being used. The fourth meeting is delayed.
- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).
- At time 6, all three rooms are being used. The fifth meeting is delayed.
- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).
Room 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. 
 

Constraints:

1 <= n <= 100
1 <= meetings.length <= 10^5
meetings[i].length == 2
0 <= starti < endi <= 5 * 10^5
All the values of starti are unique.



========================================Solution===========================================

Python

class Solution:
  def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
    count = [0] * n
    meetings.sort()

    occupied = []  # (endTime, roomId)
    availableRoomIds = [i for i in range(n)]
    heapq.heapify(availableRoomIds)

    for start, end in meetings:
      # Push meetings ending before this `meeting` in occupied to the `availableRoomsIds`.
      while occupied and occupied[0][0] <= start:
        heapq.heappush(availableRoomIds, heapq.heappop(occupied)[1])
      if availableRoomIds:
        roomId = heapq.heappop(availableRoomIds)
        count[roomId] += 1
        heapq.heappush(occupied, (end, roomId))
      else:
        newStart, roomId = heapq.heappop(occupied)
        count[roomId] += 1
        heapq.heappush(occupied, (newStart + (end - start), roomId))

    return count.index(max(count))




class Solution:
    def mostBooked(self, num_rooms: int, meetings: List[List[int]]) -> int:
        # Create a list of available rooms using indices from 0 to num_rooms-1
        available_rooms = [room for room in range(num_rooms)]
        occupied_rooms = []  # Stores rooms that are currently occupied
        heapify(available_rooms)  # Convert the available_rooms list into a heap
        booking_counts = [0] * num_rooms  # Initialize a list to keep track of booking counts per room

        # Sort the meetings in ascending order based on the start time
        sorted_meetings = sorted(meetings, key=lambda x: x[0])
        for start_time, end_time in sorted_meetings:
            # Check if there are any available rooms at the start time of the meeting
            while occupied_rooms and occupied_rooms[0][0] <= start_time:
                # Room becomes available, add it back to the available_rooms heap
                end, room = heappop(occupied_rooms)
                heappush(available_rooms, room)

            if available_rooms:
                # Assign an available room from the available_rooms heap to the meeting
                room = heappop(available_rooms)
                heappush(occupied_rooms, [end_time, room])  # Add the meeting to the occupied_rooms heap
            else:
                # All rooms are occupied, find the room with the earliest end time
                current_end, room = heappop(occupied_rooms)
                new_end = current_end + end_time - start_time  # Update the room's end time
                heappush(occupied_rooms, [new_end, room])

            booking_counts[room] += 1  # Increment the booking count for the assigned room

        # Find the room with the maximum booking count and return its index
        max_booking_count = max(booking_counts)
        most_booked_room = booking_counts.index(max_booking_count)
        return most_booked_room



class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        
        # Sort the meetings by the time they "start"
        # Convert it to a minHeap
        heapify(meetings)
        
        # A Min Heap to keep track of the unused rooms
        # We are using a minHeap because from all the unused rooms, 
        # we will always pick the one with lowest number
        # Initially, all rooms from 0 to n - 1 are unused
        unusedRooms = []
        
        # A list to keep track of the rooms and the number of meetings each room held
        meetingCount = [0] * n
        
        for i in range(n): 
            heappush(unusedRooms, i)
            meetingCount[i] = 0
            
        # A Min Heap to keep track of the rooms currently in use
        # WE will use a minHeap for those so that the used rooms are ordered
        # Based on when they will become unused again
        usedRooms = []
        
        # To keep track of the time
        # Initialize it with the time at which the very first meeting starts (the one with the smallest "start" value)
        time = meetings[0][0]
        
        # Go over each meeting from left to right
        while meetings:
            
            # Update the time accordingly
            time = max(time, meetings[0][0])
            
            # If any used rooms are now free, push them back to the unusedRooms minHeap
            while usedRooms and usedRooms[0][0] <= time: heappush(unusedRooms, heappop(usedRooms)[1])
            
            # If we have unused rooms, choose the one with the smallest number
            if unusedRooms:
                
                # Room Number
                roomNumber = heappop(unusedRooms)
                
                # Update the meeting count for this room
                meetingCount[roomNumber] += 1
                
                # When will the current room be free again?
                # That would be current time + duration of the meeting
                start, end = heappop(meetings)
                duration = end - start
                
                # Push the data to usedRooms
                heappush(usedRooms, [time + duration, roomNumber])
            
            # If we do not have any unused room
            # Update the time at which at least one room will be free
            # That is, the free time for the room at the top of "usedRooms" minHeap
            else: time = usedRooms[0][0]
                
        # What is the max count of meetings in a room
        maxCount = max(meetingCount)
        
        # The room number to return
        roomNumber = float("inf")

        for i in range(n):
            if meetingCount[i] == maxCount and i < roomNumber: roomNumber = i
        
        # Return the room number
        return roomNumber




TestCase 1:
Input
n =
2
meetings =
[[0,10],[1,5],[2,7],[3,4]]
Output
0
Expected
0

TestCase 2:
Input
n =
3
meetings =
[[1,20],[2,10],[3,5],[4,9],[6,8]]
Output
1
Expected
1
