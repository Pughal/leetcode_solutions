Given a sorted array of distinct integers and a target value, return the index if the target is found. 
If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 10^4
-10^4 <= nums[i] <= 10^4
nums contains distinct values sorted in ascending order.
-10^4 <= target <= 10^4


--------------------------------------Solution---------------------------------------

Python

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        #return bisect.bisect_left(nums, target)
        start, end = 0, len(nums)
        while start < end:
            mid = (start + end)//2
            if nums[mid] >= target:
                end = mid
            else:
                start = mid + 1
        return start
        

if __name__ == "__main__":
    nums = [1,3,5,6]
    target = 5
    soln = Solution()
    print(soln.searchInsert(nums, target))
    
TestCase 1:
Input:
nums = [1,3,5,6]
target = 5
Output:
2
Expected:
2

TestCase 2:
Input:
nums = [1,3,5,6]
target = 2
Output:
1
Expected:
1

TestCase 3:
Input:
nums = [1,3,5,6]
target = 7
Output:
4
Expected:
4


