Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 

Example 1:


Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]


Example 2:

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.


=================================Solution====================================

Python


class Solution:
  def delNodes(self, root: TreeNode, to_delete: List[int]) -> List[TreeNode]:
    ans = []
    toDeleteSet = set(to_delete)

    def dfs(root: TreeNode, isRoot: bool) -> TreeNode:
      if not root:
        return None

      deleted = root.val in toDeleteSet
      if isRoot and not deleted:
        ans.append(root)

      # If root is deleted, both children have the possibility to be a new root
      root.left = dfs(root.left, deleted)
      root.right = dfs(root.right, deleted)
      return None if deleted else root

    dfs(root, True)
    return ans


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    from collections import deque
    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:
        res = []
        remove_root = self.remove(root, set(to_delete), res)
        if not remove_root:
            res.append(root)
        return res

    def remove(self, node, del_set, forest):
        if node is None:
            return False
        
        reset_left = self.remove(node.left, del_set, forest)
        reset_right = self.remove(node.right, del_set, forest)
        if reset_left:
            node.left = None
        if reset_right:
            node.right = None

        if node.val in del_set:
            if not reset_left:
                self.append_if_valid(forest, node.left)
            if not reset_right:
                self.append_if_valid(forest, node.right)
            return True
        return False

    def append_if_valid(self, collection, node):
        if not node is None:
            collection.append(node)
        return


TestCase 1:
Input
root =
[1,2,3,4,5,6,7]
to_delete =
[3,5]
Output
[[1,2,null,4],[6],[7]]
Expected
[[1,2,null,4],[6],[7]]


TestCase 2:
Input
root =
[1,2,4,null,3]
to_delete =
[3]
Output
[[1,2,4]]
Expected
[[1,2,4]]
