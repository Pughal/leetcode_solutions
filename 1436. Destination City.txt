You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. 
Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.

 

Example 1:

Input: paths = [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
Output: "Sao Paulo" 
Explanation: Starting at "London" city you will reach "Sao Paulo" city which is the destination city. 
Your trip consist of: "London" -> "New York" -> "Lima" -> "Sao Paulo".


Example 2:

Input: paths = [["B","C"],["D","B"],["C","A"]]
Output: "A"
Explanation: All possible trips are: 
"D" -> "B" -> "C" -> "A". 
"B" -> "C" -> "A". 
"C" -> "A". 
"A". 
Clearly the destination city is "A".


Example 3:

Input: paths = [["A","Z"]]
Output: "Z"
 

Constraints:

1 <= paths.length <= 100
paths[i].length == 2
1 <= cityAi.length, cityBi.length <= 10
cityAi != cityBi
All strings consist of lowercase and uppercase English letters and the space character.



====================================Solution====================================

Python

class Solution:
  def destCity(self, paths: List[List[str]]) -> str:
    count = collections.Counter()

    for a, b in paths:
      count[a] += 1

    for a, b in paths:
      if b in count:
        count[b] -= 1
        if count[b] == 0:
          del count[b]
      else:
        return b


class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
      start = set()
      d = dict()
      for city in paths:
        start.add(city[0])
        d[city[1]] = True
      for key in d.keys():
        if key not in start:
          return key
        
class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        # Break up into departure cities and arrival cities
        departures = [x[0] for x in paths]
        dead_city = [x[1] for x in paths if x[1] not in departures]
        return(dead_city[0])
        

TestCase 1:
Input
paths =
[["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
Output
"Sao Paulo"
Expected
"Sao Paulo"

TestCase 2:
Input
paths =
[["B","C"],["D","B"],["C","A"]]
Output
"A"
Expected
"A"

TestCase 3:
Input
paths =
[["A","Z"]]
Output
"Z"
Expected
"Z"
