You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.

If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.

 

Example 1:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.


Example 2:



Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000


Example 3:



Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.
 

Constraints:

2 <= n <= 10^4
0 <= start, end < n
start != end
0 <= a, b < n
a != b
0 <= succProb.length == edges.length <= 2*10^4
0 <= succProb[i] <= 1
There is at most one edge between every two nodes.



====================================Solution==========================================

Python


class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        graph = [[] for _ in range(n)]

        for (u, v) , value in zip(edges, succProb):
            graph[u].append((v, value))
            graph[v].append((u, value))
        
        max_heap = [(-1.0, start_node)]
        max_prob = [0.0] * n
        max_prob[start_node] = 1.0

        while max_heap:

            prob, node = heapq.heappop(max_heap)
            prob = -prob

            if node == end_node:
                return prob
            
            for neighbor, edge_prob in graph[node]:
                new_prob = prob * edge_prob
                if new_prob > max_prob[neighbor]:
                    max_prob[neighbor] = new_prob
                    heapq.heappush(max_heap, (-new_prob, neighbor))

        return 0.0


class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        def dijkstra(start, end):
            pq = [(-1, start)]  # Max-heap by storing negative probabilities
            distances = {i: 0 for i in range(n)}  # Initialize distances for all nodes
            distances[start] = 1

            while pq:
                dist, node = heapq.heappop(pq)
                dist = -dist  # Convert back to positive probability
                if distances[node] > dist:
                    continue

                for d, neighbor in adj[node]:
                    new_prob = dist * d
                    if new_prob > distances[neighbor]:
                        distances[neighbor] = new_prob
                        heapq.heappush(pq, (-new_prob, neighbor))

            return distances[end]

        adj = defaultdict(list)
        for i in range(len(edges)):
            adj[edges[i][0]].append((succProb[i], edges[i][1]))
            adj[edges[i][1]].append((succProb[i], edges[i][0]))

        ans = dijkstra(start_node, end_node)
        return ans if ans != 0 else 0





TestCase 1:
Input
n =
3
edges =
[[0,1],[1,2],[0,2]]
succProb =
[0.5,0.5,0.2]
start_node =
0
end_node =
2
Output
0.25000
Expected
0.25000


TestCase 2:
Input
n =
3
edges =
[[0,1],[1,2],[0,2]]
succProb =
[0.5,0.5,0.3]
start_node =
0
end_node =
2
Output
0.30000
Expected
0.30000


TestCase 3:
Input
n =
3
edges =
[[0,1]]
succProb =
[0.5]
start_node =
0
end_node =
2
Output
0.00000
Expected
0.00000
