Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]


Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 10^4
nums[i] is either 0 or 1.
0 <= goal <= nums.length



==============================Solution=================================

Python

class Solution:
  def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
    result = 0
    prefix = 0
    count = collections.Counter({0: 1})

    for num in nums:
      prefix += num
      result += count[prefix - goal]
      count[prefix] += 1

    return result


class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        i = count = res = 0
        for j in range(len(nums)):
            if nums[j] == 1:
                goal -= 1
                count = 0
                      
            while goal == 0 and i <= j:
                goal += nums[i]
                i += 1
                count += 1
                if i > j - goal + 1:
                    break
                    
            while goal < 0:
                goal += nums[i]
                i += 1

            res += count
        return res


class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        res, cnt = 0, 0
        l = 0
        for r in range(len(nums)):
            # expand window
            if nums[r] == 1:
                goal -= 1
                cnt = 0 # reset cnt if nums[r] = 1
            # shrink window (current subarray sum exceeds goal)
            if goal == -1:
                goal += 1
                l += 1
            # get no. of subarrays within idx r
            while not goal and l <= r:
                goal += nums[l]
                l += 1
                cnt += 1
            res += cnt # add to res
        return res

'''
nums = [0,0,0,0,0,0,1,0,0,0], goal = 0
Output -> 27

if goal == -1:
    goal += 1
    l += 1
'''

class Solution:
    # Helper function to count the number of subarrays with sum at most the given goal
    def sliding_window_at_most(self, nums: List[int], goal: int) -> int:
        start, current_sum, total_count = 0, 0, 0

        # Iterate through the array using a sliding window approach
        for end in range(len(nums)):
            current_sum += nums[end]

            # Adjust the window by moving the start pointer to the right
            # until the sum becomes less than or equal to the goal
            while start <= end and current_sum > goal:
                current_sum -= nums[start]
                start += 1

            # Update the total count by adding the length of the current subarray
            total_count += end - start + 1

        return total_count

    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        return self.sliding_window_at_most(nums, goal) - self.sliding_window_at_most(nums, goal - 1)



TestCase 1:
Input
nums =
[1,0,1,0,1]
goal =
2
Output
4
Expected
4

TestCase 2:
Input
nums =
[0,0,0,0,0]
goal =
0
Output
15
Expected
15
