Hard


The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 

Example 1:

Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.


Example 2:

Input: nums = [1,1,1], k = 2
Output: 0


Example 3:

Input: nums = [1,6,1], k = 3
Output: 5
 

Constraints:

n == nums.length
2 <= n <= 10^4
0 <= nums[i] <= 10^6
1 <= k <= n * (n - 1) / 2



==========================================Solution=============================================

Python

class Solution:
  def smallestDistancePair(self, nums: list[int], k: int) -> int:
    nums.sort()

    def numPairDistancesNoGreaterThan(m: int) -> int:
      count = 0
      j = 1
      for i, num in enumerate(nums):
        while j < len(nums) and nums[j] <= num + m:
          j += 1
        count += j - i - 1
      return count

    return bisect.bisect_left(
        range(0, nums[-1] - nums[0]), k,
        key=lambda m: numPairDistancesNoGreaterThan(m))


class Solution:
    def smallestDistancePair(self, nums, k):
        def countPairs(nums, mid):
            count = 0
            j = 0
            for i in range(len(nums)):
                while j < len(nums) and nums[j] - nums[i] <= mid:
                    j += 1
                count += j - i - 1
            return count

        nums.sort()
        left, right = 0, nums[-1] - nums[0]
        
        while left < right:
            mid = (left + right) // 2
            if countPairs(nums, mid) >= k:
                right = mid
            else:
                left = mid + 1
                
        return left


class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
#Heap But TLE
        # n = len(nums)
        # minheap = []
        # for i in range(n-1):
        #     for j in range(i+1,n):
        #         distance = abs(nums[i]-nums[j])
        #         heapq.heappush(minheap,-distance)
        # # print(minheap)
        #         if len(minheap) > k:
        #             heapq.heappop(minheap)
        # return -minheap[0]
        #Time:O(n^2logk) Space:O(k)

#Binary Search  
# The idea is to search between the minimum possible distance (0) and the maximum possible distance
        nums.sort()
        def count_pairs(mid):
            count = 0
            l = 0
            for r in range(1,n):
                while nums[r]-nums[l] > mid:
                    l += 1
                count += r-l
            return count

        n = len(nums)
        l,r = 0,nums[n-1]-nums[0]
        while l < r:
            mid = (l+r)//2
            if count_pairs(mid) >= k:
                r = mid
            else:
                l = mid + 1
        return l
    #Time:O(nlogn+nlogW) where W = the maximum difference in the array Space:O(1) or O(n) if sort takes O(n) space
            


TestCase 1:
Input
nums =
[1,3,1]
k =
1
Output
0
Expected
0

TestCase 2:
Input
nums =
[1,1,1]
k =
2
Output
0
Expected
0


TestCase 3:
Input
nums =
[1,6,1]
k =
3
Output
5
Expected
5
