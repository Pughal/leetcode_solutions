You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 
Example 1:

Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:

Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6
 
Constraints:

1 <= prices.length <= 5 * 10^4
1 <= prices[i] < 5 * 10^4
0 <= fee < 5 * 10^4

========================================Solution==========================================

Python

class Solution:
  def maxProfit(self, prices: List[int], fee: int) -> int:
    sell = 0
    hold = -math.inf

    for price in prices:
      sell = max(sell, hold + price)
      hold = max(hold, sell - price - fee)

    return sell

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        # dp_hold , dp_no_hold = float("-inf") , 0
        # for price in prices:
        #     dp_no_hold = max(dp_no_hold,dp_hold+price)
        #     dp_hold = max(dp_hold,dp_no_hold-price-fee)
        # return dp_no_hold if prices else 0
        
        min_p = prices[0] + fee
        res = 0   
        for p in prices:
            if min_p < p:
                res += p-min_p
                min_p = p
            elif p+fee < min_p:
                min_p = p + fee
        return res

        # N = len(prices)
        # x0 = 0
        # x1 = float('-inf')
        # for i in range(N):
        #     x0 = max(x0, x1 + prices[i])
        #     x1 = max(x1, x0 - prices[i] - fee)
        # return max(x0, x1)
        
        
        
TestCase 1:
Input
prices =
[1,3,2,8,4,9]
fee =
2
Output
8
Expected
8

TestCase 2:
Input
prices =
[1,3,7,5,10,3]
fee =
3
Output
6
Expected
6
