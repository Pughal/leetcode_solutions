Given an integer x, return true if x is a palindrome, and false otherwise.

 
Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.


Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.


Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-2^31 <= x <= 2^31 - 1
 

Follow up: Could you solve it without converting the integer to a string?


=============================Solution===============================

Python

def isPalindrome(self, x: int) -> bool:
	if x < 0:
		return False
	
	return str(x) == str(x)[::-1]

class Solution:
  def isPalindrome(self, x: int) -> bool:
    if x < 0 or (x > 0 and x % 10 == 0):
      return False

    reversed_num = 0
    orginial_num = x

    while orginial_num:
      reversed_num = reversed_num * 10 + orginial_num % 10
      orginial_num //= 10

    return reversed_num == x


class Solution:
    def isPalindrome(self, x: int) -> bool:
        # if not x:
        #     return True
        if x < 0 or x > 2**31-1:
            return False
        
        reverse = 0
        original_num = x
        while x:
            digit = x%10
            reverse = reverse * 10 + digit
            x = x//10
        return reverse == original_num

TestCase 1:
Input
x =
121
Output
true
Expected
true

TestCase 2:
Input
x =
-121
Output
false
Expected
false

TestCase 3:
Input
x =
10
Output
false
Expected
false
