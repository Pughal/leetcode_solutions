Hard


Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]


Example 2:

Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.


Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []
 

Constraints:

1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Input is generated in a way that the length of the answer doesn't exceed 10^5.


===============================Solution=====================================

Python

class Solution:
  def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
    wordSet = set(wordDict)

    @functools.lru_cache(None)
    def wordBreak(s: str) -> List[str]:
      ans = []

      # 1 <= len(prefix) < len(s)
      for i in range(1, len(s)):
        prefix = s[0:i]
        suffix = s[i:]
        if prefix in wordSet:
          for word in wordBreak(suffix):
            ans.append(prefix + ' ' + word)

      # `wordSet` contains the whole string s, so don't add any space.
      if s in wordSet:
        ans.append(s)

      return ans

    return wordBreak(s)


class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        wordSet = set(wordDict)

        # Define a helper function to recursively generate sentences
        def dfs(start):
            if start == len(s):
                return [[]]  # Base case: empty list for appending words

            # Initialize a list to store all possible sentences
            sentences = []

            # Iterate through the string starting from the current position
            for end in range(start + 1, len(s) + 1):
                word = s[start:end]
                if word in wordSet:
                    # Recursively generate sentences for the remaining part of the string
                    for next_sentence in dfs(end):
                        sentences.append([word] + next_sentence)

            return sentences

        # Call the helper function starting from the beginning of the string
        sentences = dfs(0)

        # Concatenate each list of words into a single string and return
        return [" ".join(words) for words in sentences]



class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        wordSet = set(wordDict)
        # table to map a string to its corresponding words break
        # {string: [['word1', 'word2'...], ['word3', 'word4', ...]]}
        memo = defaultdict(list)

        # @lru_cache(maxsize=None)    # alternative memoization solution
        def _wordBreak_topdown(s):
            """return list of word lists"""
            if not s:
                return [[]]  # list of empty list

            if s in memo:
                # returned the cached solution directly.
                return memo[s]

            for endIndex in range(1, len(s) + 1):
                word = s[:endIndex]
                if word in wordSet:
                    # move forwards to break the postfix into words
                    for subsentence in _wordBreak_topdown(s[endIndex:]):
                        memo[s].append([word] + subsentence)
            return memo[s]

        # break the input string into lists of words list
        _wordBreak_topdown(s)

        # chain up the lists of words into sentences.
        return [" ".join(words) for words in memo[s]]


TestCase 1:
Input
s =
"catsanddog"
wordDict =
["cat","cats","and","sand","dog"]
Output
["cat sand dog","cats and dog"]
Expected
["cats and dog","cat sand dog"]

TestCase 2:
Input
s =
"pineapplepenapple"
wordDict =
["apple","pen","applepen","pine","pineapple"]
Output
["pine apple pen apple","pine applepen apple","pineapple pen apple"]
Expected
["pine apple pen apple","pineapple pen apple","pine applepen apple"]

TestCase 3:
Input
s =
"catsandog"
wordDict =
["cats","dog","sand","and","cat"]
Output
[]
Expected
[]
