You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. 
Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:

Input: nums = [2,4,6], k = 2
Output: 4
Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].
It can be proved that there are only 4 beautiful subsets in the array [2,4,6].


Example 2:

Input: nums = [1], k = 1
Output: 1
Explanation: The beautiful subset of the array nums is [1].
It can be proved that there is only 1 beautiful subset in the array [1].
 

Constraints:

1 <= nums.length <= 20
1 <= nums[i], k <= 1000



================================Solution=================================

Python

class Solution:
  def beautifulSubsets(self, nums: List[int], k: int) -> int:
    count = collections.Counter(nums)
    modToSubset = collections.defaultdict(set)

    for num in nums:
      modToSubset[num % k].add(num)

    prevNum = -k
    skip = 0
    pick = 0

    for subset in modToSubset.values():
      for num in sorted(subset):
        nonEmptyCount = 2**count[num] - 1
        skip, pick = skip + pick, nonEmptyCount * \
            (1 + skip + (0 if num - prevNum == k else pick))
        prevNum = num

    return skip + pick


class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        
        def dfs(i,tmp):
            if len(tmp) > 0:
                self.count += 1
            
            for j in range(i,len(nums)):
                if nums[j] - k not in tmp:
                    dfs(j + 1,tmp | {nums[j]})

        self.count = 0
        nums.sort()
        dfs(0,set())

        return self.count




class Solution:
    def countBeautifulSubsets(self, nums, difference, index, mask):
        # Base case: Return 1 if mask is greater than 0 (i.e., non-empty subset)
        if index == len(nums):
            return 1 if mask > 0 else 0
        
        # Flag to check if the current subset is beautiful
        is_beautiful = True
        
        # Check if the current number forms a beautiful pair with any previous number in the subset
        for j in range(index):
            if ((1 << j) & mask) == 0 or abs(nums[j] - nums[index]) != difference:
                continue
            else:
                is_beautiful = False
                break

        # Recursively calculate beautiful subsets including and excluding the current number
        skip = self.countBeautifulSubsets(nums, difference, index + 1, mask)
        take = self.countBeautifulSubsets(nums, difference, index + 1, mask + (1 << index)) if is_beautiful else 0
        
        return skip + take

    def beautifulSubsets(self, nums, k):
        return self.countBeautifulSubsets(nums, k, 0, 0)



TestCase 1:
Input
nums =
[2,4,6]
k =
2
Output
4
Expected
4

TestCase 2:
Input
nums =
[1]
k =
1
Output
1
Expected
1
