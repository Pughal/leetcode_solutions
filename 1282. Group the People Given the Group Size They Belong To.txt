There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. 
For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. 
It is guaranteed that there will be at least one valid solution for the given input.

 

Example 1:

Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.
The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.
The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].


Example 2:

Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]
 

Constraints:

groupSizes.length == n
1 <= n <= 500
1 <= groupSizes[i] <= n


=================================================Solution============================================

Python

class Solution:
  def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]:
    ans = []
    groupSizeToIndices = defaultdict(list)

    for i, groupSize in enumerate(groupSizes):
      groupSizeToIndices[groupSize].append(i)

    for groupSize, indices in groupSizeToIndices.items():
      groupIndices = []
      for index in indices:
        groupIndices.append(index)
        if len(groupIndices) == groupSize:
          ans.append(groupIndices.copy())
          groupIndices.clear()

    return ans



class Solution:
    def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]:
        #create a map which contains group size as key and list of people as value
        #means map{1:person 5(index)}
        group_map={}
        for i, people in enumerate(groupSizes):
            if people not in group_map:
                group_map[people]=[i]
            else:
                group_map[people].append(i)
        #{3: [0, 1, 2, 3, 4, 6], 1: [5]}
        #but from these list [0, 1, 2, 3, 4, 6] we need to break it into chunks of size of 3
        res=[]
        for key in group_map:
            group_size=group_map[key]
            if len(group_size)>key:
                #break it into chunks
                group_size_key=group_map[key]
                for i in range(0,len(group_size_key),key):
                    res.append(group_size_key[i:i+key])
            else:
                res.append(group_map[key])
        return res



TestCase 1:
Input
groupSizes =
[3,3,3,3,3,1,3]
Output
[[0,1,2],[3,4,6],[5]]
Expected
[[5],[0,1,2],[3,4,6]]

TestCase 2:
Input
groupSizes =
[2,1,3,3,3,2]
Output
[[0,5],[1],[2,3,4]]
Expected
[[1],[0,5],[2,3,4]]
