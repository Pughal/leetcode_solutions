Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 
Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
 
Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


------------------Solution------------------
Python3

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        ''' Kandane's Algorithm
        '''
        max_so_far = float('-inf')
        max_end_here = 0

        for i in range(len(nums)):
            max_end_here = max(max_end_here + nums[i], nums[i])
            max_so_far = max(max_so_far, max_end_here)

        return max_so_far

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        result = nums[0]
        cur_sum = 0

        for n in nums:
            cur_sum = cur_sum + n if cur_sum + n > n else n
            result = cur_sum if cur_sum > result else result
        return result

if __name__ == "__main__":
    nums = [-2,1,-3,4,-1,2,1,-5,4]
    soln = Solution()
    print(soln.maxSubArray(nums))



TestCase 1:
Input:
nums = [-2,1,-3,4,-1,2,1,-5,4]
Output:
6
Expected:
6

TestCase 2:
Input:
nums = [1]
Output:
1
Expected:
1

TestCase 3:
Input:
nums = [5,4,-1,7,8]
Output:
23
Expected:
23
