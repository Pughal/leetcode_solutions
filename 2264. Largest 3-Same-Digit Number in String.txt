You are given a string num representing a large integer. An integer is good if it meets the following conditions:

It is a substring of num with length 3.
It consists of only one unique digit.
Return the maximum good integer as a string or an empty string "" if no such integer exists.

Note:

A substring is a contiguous sequence of characters within a string.
There may be leading zeroes in num or a good integer.
 

Example 1:

Input: num = "6777133339"
Output: "777"
Explanation: There are two distinct good integers: "777" and "333".
"777" is the largest, so we return "777".


Example 2:

Input: num = "2300019"
Output: "000"
Explanation: "000" is the only good integer.


Example 3:

Input: num = "42352338"
Output: ""
Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.
 

Constraints:

3 <= num.length <= 1000
num only consists of digits.



==================================Solution==================================

Python

class Solution:
  def largestGoodInteger(self, num: str) -> str:
    return max(num[i - 2:i + 1]
               if num[i] == num[i - 1] == num[i - 2]
               else '' for i in range(2, len(num)))



class Solution:
    def largestGoodInteger(self, num: str) -> str:
        result = ""
        for i in range(1, len(num)):
            if num[i-2] == num[i-1] == num[i]:
                item = num[i-2:i+1]
                result = item if result < item else result
        return result
                

class Solution:
    def largestGoodInteger(self, num: str) -> str:   
        triple = [str(n)*3 for n in range(9,-1,-1)]
        for n in triple:
            if n in num: return n
        return ''


TestCase 1:
Input
num =
"6777133339"
Output
"777"
Expected
"777"

TestCase 2:
Input
num =
"2300019"
Output
"000"
Expected
"000"

TestCase 3:
Input
num =
"42352338"
Output
""
Expected
""
