Hard

A program was supposed to print an array of integers. 
The program forgot to print whitespaces and the array is printed as a string of digits s 
and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.

Given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. 
Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: s = "1000", k = 10000
Output: 1
Explanation: The only possible array is [1000]

Example 2:

Input: s = "1000", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.

Example 3:

Input: s = "1317", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]
 

Constraints:

1 <= s.length <= 10^5
s consists of only digits and does not contain leading zeros.
1 <= k <= 10^9


-------------------------------------------------------Solution------------------------------------------------------

Python

class Solution:
    def dfs(self, s: str, k: int, i: int, dp: List[int]) -> int:
        if i == len(s):
            return 1
        if s[i] == '0':
            return 0
        if dp[i] != -1:
            return dp[i]

        ans = 0
        num = 0
        for j in range(i, len(s)):
            num = num * 10 + int(s[j])
            if num > k:
                break
            ans = (ans + self.dfs(s, k, j + 1, dp)) % 1000000007

        dp[i] = ans
        return ans

    def numberOfArrays(self, s: str, k: int) -> int:
        dp = [-1] * len(s)
        return self.dfs(s, k, 0, dp)
        
        
 class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        n = len(s)
        mod = 10 ** 9 + 7
        dp = [0] * (n + 1)
        dp[n] = 1
        for i in reversed(range(n)):
            if s[i] == "0":
                continue
            num = int(s[i])
            j = i + 1
            while j <= n and num <= k:
                dp[i] += dp[j]
                num = num * 10 + (int(s[j]) if j < n else 0)
                j += 1
            dp[i] = dp[i] % mod
        return dp[0]
                   

class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
            m, n = len(str(k)), len(s)
            dp = [1] * (n + 1)
            #find out number of ways for each ending.
            for i in range(n):
                res, cur = 0, ""
                #For each ending digit i, we traves back, to find all the valid numbers which is no larger than k, and ending with this digit i.
                for idx in range(i, max(-1, i - m), -1):  # In case we transpass the first digit.
                    cur = s[idx] + cur
                    if cur[0] != "0" and int(cur) <= k: # A number is valid if it has no leading zero and no larger than k.
                        res += dp[idx]                          # Whenever we have a valid ending number, we add the dp[idx] to dp[i].
                if res == 0:
                    return 0
                else:
                    dp[i + 1] = res % (10 ** 9 + 7)
            return dp[-1]
        
TestCase 1:
Input
s = "1000"
k = 10000
Output
1
Expected
1

TestCase 2:
Input
s = "1000"
k = 10
Output
0
Expected
0

TestCase 3:
Input
s = "1317"
k = 2000
Output
8
Expected
8
