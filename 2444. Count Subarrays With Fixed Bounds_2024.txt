Hard

You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

 
Example 1:

Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].

Example 2:

Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
 

Constraints:

2 <= nums.length <= 10^5
1 <= nums[i], minK, maxK <= 10^6


----------------------------------------Solution--------------------------------------

Python

class Solution:
  def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
    result = 0
    j = -1
    prevMinKIndex = -1
    prevMaxKIndex = -1

    for i, num in enumerate(nums):
      if num < minK or num > maxK:
        j = i
      if num == minK:
        prevMinKIndex = i
      if num == maxK:
        prevMaxKIndex = i
      result += max(0, min(prevMinKIndex, prevMaxKIndex) - j)

    return result

if __name__ == "__main__":
    nums = [1,3,5,2,7,5]
    minK = 1
    maxK = 5
    soln = Solution()
    print(soln.countSubarrays(nums, minK, maxK))
    


"""

BF:
    Get Subarrays and count valid ones
    O(N*N) * O(N)

Optimized:
    1) For every range, keep track of max and min
    Count valid subarrays
    O(N*N)

    2) Sliding window
    get min window and try to expand 


    ((----)---)

    [left, mid] is the smallest widow which satisfies these conditions
    [left, right] is the largest

    then total = right - mid + 1 (total subarrays starting from left)

"""


"""
class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
    
        left, mid = 0,0
        ans = 0
        max_w = -1
        min_w = -1

        n = len(nums)
        for right in range(n):
            val = nums[right]
            # resize sliding window
            if not( minK <= val <= maxK):
                left = right + 1
                mid = right + 1
                max_w = -1
                min_w = -1
            else:
                if val == maxK and max_w == -1:
                    max_w = right
                if val == minK and min_w == -1:
                    min_w = right

                # if your window has min and max
                if min_w >= 0 and max_w >= 0:
                    mid = max(min_w, max_w)

                    ans += (right - mid + 1)

        return ans
"""



# take examples and solve it

class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        res = 0
        firstBad, firstMin, firstMax = -1,-1,-1
        for idx,val in enumerate(nums):
            if not( minK <= val <= maxK):
                firstBad = idx
            if val == minK:
                firstMin = idx
            if val == maxK:
                firstMax = idx
            # get all subarrays ending at idx
            if firstBad < firstMin and firstBad < firstMax:
                start = min(firstMin, firstMax)
                
                res += start - firstBad
        return res



            





TestCase 1:
Input:
nums = [1,3,5,2,7,5]
minK = 1
maxK = 5
Output:
2
Expected:
2

TestCase 2:
Input:
nums = [1,1,1,1]
minK = 1
maxK = 1
Output:
10
Expected:
10
