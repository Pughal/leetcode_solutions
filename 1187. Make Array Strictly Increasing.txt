Hard

Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].


Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].


Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.
 

Constraints:

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9
 
 
========================================Solution===========================================

Python

class Solution:
  def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
    # dp[i] := min steps to reach i at previous round
    dp = {-1: 0}

    arr2.sort()

    for a in arr1:
      nextDp = collections.defaultdict(lambda: math.inf)
      for val, steps in dp.items():
        # it's possible to use the value in arr1
        if a > val:
          nextDp[a] = min(nextDp[a], steps)
        # Also try the value in arr2
        i = bisect_right(arr2, val)
        if i < len(arr2):
          nextDp[arr2[i]] = min(nextDp[arr2[i]], steps + 1)
      if not nextDp:
        return -1
      dp = nextDp

    return min(dp.values())


class Solution:
    def makeArrayIncreasing(self, nums: List[int], arr2: List[int]) -> int :
        # sort arr2 and get size, set original dp with 0 -> -1 
        arr2.sort()
        arrL = len(arr2)
        dp = {0: -1}
        # for num in nums 
        for num in nums : 
            # set up a new dp with default of infinity 
            new_dp = defaultdict(lambda: inf)
            # loop current dp items 
            for key, value in dp.items() :
                # if value < num < new_dp[key] 
                if value < num < new_dp[key] :
                    # set new dp at key to num  
                    new_dp[key] = num 
                # find index in arr2 
                arr2_i = bisect.bisect_right(arr2, value)
                # if index in arr2 valid and arr2 at index less than new dp at key + 1 
                if arr2_i < arrL and arr2[arr2_i] < new_dp[key+1] : 
                    # store for new dp at key + 1 the value of arr2 at index 
                    new_dp[key+1] = arr2[arr2_i]
            # if new dp has not had anything filed 
            if not new_dp : 
                # we cannot continue 
                return -1 
            # otherwise, update 
            dp = new_dp 
        # then return as needed 
        return min(dp)

TestCase 1:
Input
arr1 =
[1,5,3,6,7]
arr2 =
[1,3,2,4]
Output
1
Expected
1

TestCase 2:
Input
arr1 =
[1,5,3,6,7]
arr2 =
[4,3,1]
Output
2
Expected
2

TestCase 3:
Input
arr1 =
[1,5,3,6,7]
arr2 =
[1,6,3,3]
Output
-1
Expected
-1
