Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 
Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.


Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.


Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100



=======================================Solution====================================

Python

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        return sum([math.comb(n, 2) for n in collections.Counter(nums).values()])      

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        res = 0
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):
                if nums[i] == nums[j]:
                    res += 1
        return res


class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        # Idea: count += previous count
        # i.e. 
        # 1        count += 0
        # ^
        # 1  1     count += 1
        #    ^
        # 1  1  1  count += 2
        #       ^

        # Sol 1:
        # Time: O(N), Space: O(N)
        # return self.withCounter(nums)

        # Sol 2:
        # Time: O(NlogN), Space: O(1)
        return self.withSort(nums)

    def withCounter(self, nums: List[int]) -> int:
        # Time: O(N), Space: O(N)
        counter = collections.Counter()
        count = 0
        for n in nums:
            count += counter[n]
            counter[n] += 1
        return count

    def withSort(self, nums: List[int]) -> int:
        # Time: O(NlogN), Space: O(1)
        nums.sort()
        left = right = count = 0
        while right < len(nums):
            while right < len(nums) and nums[left] == nums[right]:
                count += right - left
                right += 1
            left = right
        return count

        # 1
        # 1, 1  + count
        # -  -
        # 1, 1, 1  + count
        #    ----
        # -     -




TestCase 1:
Input
nums =
[1,2,3,1,1,3]
Output
4
Expected
4

TestCase 2:
Input
nums =
[1,1,1,1]
Output
6
Expected
6

TestCase 3:
Input
nums =
[1,2,3]
Output
0
Expected
0
