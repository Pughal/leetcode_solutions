Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. 
That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

Example 1:

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Example 2:

Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").
 

Constraints:

1 <= s.length <= 10^5
s consists of only English lowercase letters.


--------------------------------------------------Solution--------------------------------------------------------

Python

class Solution:
    def partitionString(self, s: str) -> int:
        result, usedMask = 1,0

        for c in s:
            i = ord(c) - ord('a')
            if usedMask >> i & 1:
                usedMask = 1 << i
                result += 1
            else:
                usedMask |= 1 << i
        
        return result

class Solution:
    def partitionString(self, _string: str) -> int:
        count, substring = 1, ""
        for character in _string:
            if character in substring:
                substring = character
                count +=1
            else:
                substring += character
        return count
 
 class Solution:
    def partitionString(self, s: str) -> int:
        substrings = []
        substring = ''
        for let in s:
            if let not in substring:
                substring += let
            else:
                substrings.append(substring)
                substring = let
        
        if len(substring) > 0:
            substrings.append(substring)

        return len(substrings)
        
class Solution:
    def partitionString(self, s: str) -> int:
        sub = ""
        ans = 1
        for c in s:
            if c in sub:
                ans += 1
                sub = c
            else:
                sub += c
        return ans



TestCase 1:
Input:
s = "abacaba"
Output:
4
Expected:
4

TestCase 2:
Input:
s = "ssssss"
Output:
6
Expected:
6
