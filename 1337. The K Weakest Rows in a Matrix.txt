You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). 
The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.

A row i is weaker than a row j if one of the following is true:

The number of soldiers in row i is less than the number of soldiers in row j.
Both rows have the same number of soldiers and i < j.
Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.

 

Example 1:

Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].


Example 2:

Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0,2,3,1].
 

Constraints:

m == mat.length
n == mat[i].length
2 <= n, m <= 100
1 <= k <= m
matrix[i][j] is either 0 or 1.


========================================Solution========================================

Python

class Solution:
	def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
		m = len(mat)
		rows = sorted(range(m), key=lambda i: (mat[i], i))
		# del rows[k:]
		return rows[:k]

import heapq
class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        min_heap = [ (sum(row), i) for i, row in enumerate(mat)]
        
        heapq.heapify(min_heap)
        
        k_weakest_rows = []
        for _ in range(k):
            k_weakest_rows.append(heapq.heappop(min_heap)[1] )
        return k_weakest_rows

#m= len(mat)
#Time O(m*n+klogm) Constructing min_heap costs O(m*n) traversing each cell in matrix, constructing k_weakest_rows costs O(mlogm) each pop cost O(logm) iterate k times. 
#Space O(k) k_weakest_rows stores k elements

#goal: return k rows has smallest numbers of 1
#min_heap adding all (freq_ones, row_index)
#iterate (row_index, freq_ones) in counter
#if len(k_weakest_rows) < k:
#k_weakest_rows.append( heappop(min_heap)[1] ) 

    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        count = [(sum(row), i) for i, row in enumerate(mat)]
        max_heap = []
        for freq_ones, row_index in count:
            if len(max_heap) < k:
                heapq.heappush(max_heap, (-freq_ones, -row_index))  # Negate both values
            else:
                if (- freq_ones, - row_index) > (max_heap[0][0], max_heap[0][1]):  # Compare in normal order
                    heapq.heappop(max_heap)
                    heapq.heappush(max_heap, (-freq_ones, -row_index))  # Negate both values

        # Pop from the heap and reverse the order
        result = []
        for _ in range(k):
            _, idx = heapq.heappop(max_heap)
            result.append(-idx)
        return result[::-1]
#Time O(m*n+mlogk) Count cost O(m*n), constructing max_heap cost O(mlogk), each pop push costs O(logk) iterate m times, result cost O(klogk)
#space O(m+k)  count cost O(m), max_heap cost O(k), result takes O(k)
#max_heap push (-freq_ones, -row_index) if len(max_heap) < k, 



TestCase 1:
Input
mat =
[[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]]
k =
3
Output
[2,0,3]
Expected
[2,0,3]

TestCase 2:
Input
mat =
[[1,0,0,0],[1,1,1,1],[1,0,0,0],[1,0,0,0]]
k =
2
Output
[0,2]
Expected
[0,2]
