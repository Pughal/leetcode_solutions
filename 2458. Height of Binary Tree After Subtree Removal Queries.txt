You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.

You have to perform m independent queries on the tree where in the ith query you do the following:

Remove the subtree rooted at the node with the value queries[i] from the tree. It is guaranteed that queries[i] will not be equal to the value of the root.
Return an array answer of size m where answer[i] is the height of the tree after performing the ith query.

Note:

The queries are independent, so the tree returns to its initial state after each query.
The height of a tree is the number of edges in the longest simple path from the root to some node in the tree.
 

Example 1:


Input: root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]
Output: [2]
Explanation: The diagram above shows the tree after removing the subtree rooted at node with value 4.
The height of the tree is 2 (The path 1 -> 3 -> 2).


Example 2:


Input: root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]
Output: [3,2,3,2]
Explanation: We have the following queries:
- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 4).
- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -> 8 -> 1).
- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 6).
- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -> 9 -> 3).
 

Constraints:

The number of nodes in the tree is n.
2 <= n <= 10^5
1 <= Node.val <= n
All the values in the tree are unique.
m == queries.length
1 <= m <= min(n, 10^4)
1 <= queries[i] <= n
queries[i] != root.val



=======================================Solution==========================================

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
  def treeQueries(self, root: TreeNode | None, queries: list[int]) -> list[int]:
    @lru_cache(None)
    def height(root: TreeNode | None) -> int:
      if not root:
        return 0
      return 1 + max(height(root.left), height(root.right))

    # valToMaxHeight[val] := the maximum height without the node with `val`
    valToMaxHeight = {}

    # maxHeight := the maximum height without the current node `root`
    def dfs(root: TreeNode | None, depth: int, maxHeight: int) -> None:
      if not root:
        return
      valToMaxHeight[root.val] = maxHeight
      dfs(root.left, depth + 1, max(maxHeight, depth + height(root.right)))
      dfs(root.right, depth + 1, max(maxHeight, depth + height(root.left)))

    dfs(root, 0, 0)
    return [valToMaxHeight[query] for query in queries]




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:
        d = defaultdict(int)

        def dfs(node, cur):
            if not node: return 
            d[node.val] = max(self.max_h, d[node.val])
            self.max_h = max(cur, self.max_h)
            dfs(node.left, cur+1)
            dfs(node.right, cur+1)
            node.left, node.right = node.right, node.left

        self.max_h = 0
        dfs(root, 0)
        self.max_h = 0
        dfs(root, 0)
        return [d[q] for q in queries]



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def treeQueries(self, root: Optional[TreeNode], queries: List[int]) -> List[int]:
        ans = []
        depth = {}
        height = {}
        def dfs(node, d):
            if not node:
                return -1
            depth[node.val] = d
            left = dfs(node.left, d + 1)
            right = dfs(node.right, d + 1)
            hei = max(left, right) + 1
            height[node.val] = hei
            return hei
        dfs(root, 0)
        cousin = {}
        for nodeval, dep in depth.items():
            if dep not in cousin:
                cousin[dep] = []
            if len(cousin[dep]) == 2 and height[nodeval] <= cousin[dep][0][0]:
                continue
            heapq.heappush(cousin[dep], [height[nodeval], nodeval])
            if len(cousin[dep]) > 2:
                heapq.heappop(cousin[dep])
        ans = []
        for q in queries:
            dep = depth[q]
            currCousin = cousin[dep]
            if len(currCousin) == 1 and currCousin[-1][1] == q:
                ans.append(dep - 1)
            elif q == currCousin[-1][1]:
                ans.append(dep + (currCousin[0][0]))
            else:
                ans.append(dep + (currCousin[-1][0]))
        return ans



TestCase 1:
Input
root =
[1,3,4,2,null,6,5,null,null,null,null,null,7]
queries =
[4]
Output
[2]
Expected
[2]


TestCase 2:
Input
root =
[5,8,9,2,1,3,7,4,6]
queries =
[3,2,4,8]
Output
[3,2,3,2]
Expected
[3,2,3,2]
