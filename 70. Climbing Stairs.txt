You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps


Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45



====================================Solution======================================

Python

class Solution:
  def climbStairs(self, n: int) -> int:
    prev1 = 1  # dp[i - 1]
    prev2 = 1  # dp[i - 2]
    for _ in range(2, n + 1):
      dp = prev1 + prev2
      prev2 = prev1
      prev1 = dp
    return prev1

class Solution:
    def climbStairs(self, n: int) -> int:
        if n<=2:
            return n
        ans=0
        first=1
        second=2
        for i in range(n-2):
            ans=first+second
            first=second
            second=ans
        return ans



class Solution:
    def climbStairs(self, n: int) -> int:
        
        oneStep = 1
        twoStep = 1
        for i in range(n - 1):
            temp = oneStep
            oneStep += twoStep
            twoStep = temp
        
        return oneStep



TestCase 1:
Input
n =
2
Output
2
Expected
2

TestCase 2:
Input
n =
3
Output
3
Expected
3
