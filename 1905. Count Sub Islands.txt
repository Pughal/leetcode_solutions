You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). 
An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.

An island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.

Return the number of islands in grid2 that are considered sub-islands.

 

Example 1:


Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
Output: 3
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.


Example 2:


Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
Output: 2 
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.
 

Constraints:

m == grid1.length == grid2.length
n == grid1[i].length == grid2[i].length
1 <= m, n <= 500
grid1[i][j] and grid2[i][j] are either 0 or 1.



===========================Solution=================================

Python

class Solution:
  def countSubIslands(
      self,
      grid1: list[list[int]],
      grid2: list[list[int]],
  ) -> int:
    m = len(grid2)
    n = len(grid2[0])

    def dfs(i: int, j: int) -> int:
      if i < 0 or i == m or j < 0 or j == n:
        return 1
      if grid2[i][j] != 1:
        return 1

      grid2[i][j] = 2  # Mark 2 as visited.

      return (dfs(i + 1, j) & dfs(i - 1, j) &
              dfs(i, j + 1) & dfs(i, j - 1) & grid1[i][j])

    ans = 0

    for i in range(m):
      for j in range(n):
        if grid2[i][j] == 1:
          ans += dfs(i, j)

    return ans



from collections import deque 

class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        num_of_sub_island = 0 
        MOVES = [ (0,1), (1,0), (-1,0),(0 ,-1)]
        ROWS, COLS = len(grid1) , len(grid1[0])
        visited = [ [False]* COLS for _ in range(ROWS) ]
        #q = deque() 
        
        #iterate for each block 
        for r in range(ROWS):
            for c in range(COLS):
                #if both are == island 
                if grid2[r][c] == 1 and visited[r][c] != True:
                    #num_of_sub_island += 1 
                    visited[r][c] = True 
                    is_valid_sub = True

                    q = deque()
                    q.append((r,c))
                    
                    if grid1[r][c] != 1 :
                        is_valid_sub = False
                        

                    while q:
                        curr_r, curr_c = q.popleft()
                        for dr,dc in MOVES:
                            next_r = curr_r + dr 
                            next_c = curr_c + dc 

                            if 0<= next_r < ROWS and 0<= next_c < COLS and visited[next_r][next_c] != True and grid2[next_r][next_c]== 1:
                                visited[next_r][next_c] = True
                                q.append((next_r, next_c))
                                if grid1[next_r][next_c] == 0:
                                    is_valid_sub = False
                    
                    if is_valid_sub:
                        num_of_sub_island +=1 

        return num_of_sub_island
                




TestCase 1:
Input
grid1 =
[[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]]
grid2 =
[[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
Output
3
Expected
3

TestCase 2:
Input
grid1 =
[[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]]
grid2 =
[[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
Output
2
Expected
2
