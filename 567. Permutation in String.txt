Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.
 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 10^4
s1 and s2 consist of lowercase English letters.


--------------------------------------------Solution-------------------------------------------
Python

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        count = collections.Counter(s1)
        length = len(s1)

        for r, c in enumerate(s2):
            count[c] -= 1
            if count[c] >= 0:
                length -= 1
            if r >= len(s1):
                count[s2[r - len(s1)]] += 1
                if count[s2[r - len(s1)]] > 0:
                    length += 1
            if length == 0:
                return True

        return False

if __name__ == "__main__":
    s1 = "ab"
    s2 = "eidbaooo"
    soln = Solution()
    print(soln.checkInclusion(s1, s2))
    
    
 
TestCase 1:
Input
s1 = "ab"
s2 = "eidbaooo"
Output
true
Expected
true

TestCase 2:
Input
s1 = "ab"
s2 = "eidboaoo"
Output
false
Expected
false

