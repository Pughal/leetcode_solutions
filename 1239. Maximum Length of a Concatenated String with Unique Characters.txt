You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.


Example 2:

Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").


Example 3:

Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
 

Constraints:

1 <= arr.length <= 16
1 <= arr[i].length <= 26
arr[i] contains only lowercase English letters.



====================================Solution===========================================

Python

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        dp = [0]
        res = 0
        
        for s in arr:
            a, dup = 0, 0
            for c in s:
                dup |= a & (1 << (ord(c) - ord('a')))
                a |= 1 << (ord(c) - ord('a'))
            
            if dup > 0:
                continue
            
            for i in range(len(dp) - 1, -1, -1):
                if (dp[i] & a) > 0:
                    continue
                dp.append(dp[i] | a)
                res = max(res, bin(dp[i] | a).count('1'))
        
        return res


from collections import Counter
class Solution:
    def maxLength(self, arr: List[str]) -> int:
        return self.dfs(arr,0,"")
    
    def dfs(self, arr, pos, res):
        if len(res) != len(set(res)):
            return 0
        
        best = len(res)
        for i in range(pos, len(arr)):
            best = max(best, self.dfs(arr, i + 1, res + arr[i]))
        return best



from collections import Counter
class Solution:
    def maxLength(self, arr: List[str]) -> int:

        # Trivial cases
        if not arr:
            return 0
            
        # validity function
        # checks if string is truly unique
        def is_valid(s: str) -> bool:
            return len(s) == len(set(s))

        # our backtracking function
        def backtrack(
            arr: list[str],             # contains our choices
            pos: int,                   # which index are we on right now?
            freqs: Counter[str]         # contains frequencies of our current result
        ):
            
            # base case
            if len(freqs) and freqs.most_common(1)[0][1] > 1:
                return 0

            longest_length: int = len(freqs)                          # stores longest length we've seen so far
            for i in range(pos, len(arr)):
                word_map: Counter[str] = Counter(arr[i])    # get the frequencies of the current word_map
                if len(word_map) != len(arr[i]):            # exit if ?
                    continue 
                freqs.update(word_map)
                longest_length = max(longest_length, backtrack(arr, i + 1, freqs))

                # Backtrack
                for char in word_map:
                    if freqs[char] == word_map[char]:
                        del freqs[char]
                    else:
                        freqs[char] -= word_map[char]
            return longest_length

        return backtrack(arr, 0, Counter())
        
        


TestCase 1:
Input
arr =
["un","iq","ue"]
Output
4
Expected
4

TestCase 2:
Input
arr =
["cha","r","act","ers"]
Output
6
Expected
6

TestCase 3:
Input
arr =
["abcdefghijklmnopqrstuvwxyz"]
Output
26
Expected
26
