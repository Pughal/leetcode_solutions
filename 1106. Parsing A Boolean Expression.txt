Hard


A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.

It is guaranteed that the given expression is valid and follows the given rules.

 

Example 1:

Input: expression = "&(|(f))"
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now "&(f)".
Then, evaluate &(f) --> f. The expression is now "f".
Finally, return false.

Example 2:

Input: expression = "|(f,f,f,t)"
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.


Example 3:

Input: expression = "!(&(f,t))"
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now "!(f)".
Then, evaluate !(f) --> NOT false --> true. We return true.
 

Constraints:

1 <= expression.length <= 2 * 10^4
expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.



================================Solution====================================

Python

class Solution:
  def parseBoolExpr(self, expression: str) -> bool:
    def dfs(s: int, e: int) -> list[str]:
      if s == e:
        return True if expression[s] == 't' else False

      exps = []
      layer = 0

      for i in range(s, e + 1):
        c = expression[i]
        if layer == 0 and c in '!&|':
          op = c
        elif c == '(':
          layer += 1
          if layer == 1:
            left = i + 1
        elif c == ')':
          layer -= 1
          if layer == 0:
            exps.append(dfs(left, i - 1))
        elif c == ',' and layer == 1:
          exps.append(dfs(left, i - 1))
          left = i + 1

      if op == '|':
        return functools.reduce(operator.or_, exps)
      if op == '&':
        return functools.reduce(operator.and_, exps)
      if op == '!':
        return not exps[0]

    return dfs(0, len(expression) - 1)



class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        index = [
            0
        ]  # using a list because python variables are pass by object reference
        return self._evaluate(expression, index)

    def _evaluate(self, expr: str, index: list) -> bool:
        curr_char = expr[index[0]]
        index[0] += 1

        if curr_char == "t":
            return True
        if curr_char == "f":
            return False

        if curr_char == "!":
            index[0] += 1  # skip '('
            result = not self._evaluate(expr, index)
            index[0] += 1  # skip ')'
            return result

        values = []
        index[0] += 1  # skip '('
        while expr[index[0]] != ")":
            if expr[index[0]] != ",":
                values.append(
                    self._evaluate(expr, index)
                )  # collect results of subexpressions
            else:
                index[0] += 1  # skip commas
        index[0] += 1  # skip ')'

        if curr_char == "&":
            return all(values)

        if curr_char == "|":
            return any(values)

        return False  # this point should never be reached

TestCase 1:
Input
expression =
"&(|(f))"
Output
false
Expected
false


TestCase 2:
Input
expression =
"|(f,f,f,t)"
Output
true
Expected
true

TestCase 3:
Input
expression =
"!(&(f,t))"
Output
true
Expected
true
