You are given two integers n and x. You have to construct an array of positive integers nums of size n where for every 0 <= i < n - 1, nums[i + 1] is greater than nums[i], 
and the result of the bitwise AND operation between all elements of nums is x.

Return the minimum possible value of nums[n - 1].

 

Example 1:

Input: n = 3, x = 4
Output: 6
Explanation:
nums can be [4,5,6] and its last element is 6.

Example 2:

Input: n = 2, x = 7
Output: 15
Explanation:
nums can be [7,15] and its last element is 15.


Constraints:

1 <= n, x <= 10^8


============================================Solution==============================================

Python

class Solution:
  def minEnd(self, n: int, x: int) -> int:
    kMaxBit = n.bit_length() + x.bit_length()
    k = n - 1
    kBinaryIndex = 0

    for i in range(kMaxBit):
      if x >> i & 1 == 0:
        if k >> kBinaryIndex & 1:
          x |= 1 << i
        kBinaryIndex += 1

    return x



class Solution:
    def minEnd(self, n: int, x: int, bit = 1) -> int:
        n -= 1
        while n:

            while x & bit:
                bit *= 2
            
            if n & 1: x ^= bit
            n //= 2
            bit *= 2
        return x



class Solution:
    def minEnd(self, n: int, x: int) -> int:
        ret = x
        n -= 1  # Reducing n by 1 to exclude x from the iteration
        mask = 1
        # Step 1: Iterate while n > 0, using mask for bit positions
        while n > 0:
            # Step 2: If the corresponding bit in x is 0
            if (mask & x) == 0:
                # Set the bit in result based on least significant bit of n
                ret |= (n & 1) * mask
                # Shift n right by 1 to process next bit
                n >>= 1
            # Shift mask left by 1 for next iteration
            mask <<= 1
        return ret
        # time: O(b)
        # space: O(1)


TestCase 1:
Input
n = 3
x = 4
Output
6
Expected
6

TestCase 2:
Input
n = 2
x = 7
Output
15
Expected
15
