You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.

We want to place these books in order onto bookcase shelves that have a total width shelfWidth.

We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, 
then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. 
We repeat this process until there are no more books to place.

Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.

For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.
Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.

 

Example 1:


Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.
Notice that book number 2 does not have to be on the first shelf.


Example 2:

Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
Output: 4
 

Constraints:

1 <= books.length <= 1000
1 <= thicknessi <= shelfWidth <= 1000
1 <= heighti <= 1000



=============================Solution==================================

Python

class Solution:
  def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:
    dp = [0] + [math.inf] * len(books)

    for i in range(len(books)):
      sumThickness = 0
      maxHeight = 0
      
      for j in range(i, -1, -1):
        thickness, height = books[j]
        sumThickness += thickness
        if sumThickness > shelfWidth:
          break
        maxHeight = max(maxHeight, height)
        dp[i + 1] = min(dp[i + 1], dp[j] + maxHeight)

    return dp[-1]



class Solution:
    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:
        cache = {}

        def dfs(i, shelfHeight, remainingWidth):
            # if remaining Width is less than 0, we added the book that we can't add so return positive inf 
            # so that later when we find minimum for cache, we will pick the other value
            if remainingWidth < 0:
                return float("inf")

            # if we already reached to the end of books, return the height of that last shelf
            if i == len(books):
                return shelfHeight

            # if we already found the pair in cache, return the height
            if (i, shelfHeight, remainingWidth) in cache:
                return cache[(i, shelfHeight, remainingWidth)]

            # 1. add the book to current shelf by passing (i+1, max(current_book_height, current_shelf_height), remaining_shelf_width-current_book_width)
            # 2. add the book to next shelf by passing (i+1, current_book_height, initial_shelf_width-current_book_width) and add that to current shelfHeight
            # update the cache with minimum value between 1 and 2
            book_width, book_height = books[i]
            add_to_current_shelf = dfs(i+1, max(book_height, shelfHeight), remainingWidth-book_width)
            add_to_next_shelf = shelfHeight + dfs(i+1, book_height, shelfWidth-book_width)

            cache[(i, shelfHeight, remainingWidth)] = min(add_to_current_shelf, add_to_next_shelf)

            return cache[(i, shelfHeight, remainingWidth)]

        return dfs(0, 0, shelfWidth)




import math

class Solution:
    def minHeightShelves(self, books: List[List   [int]], shelfWidth: int) -> int:
        #return self.bfs(books, shelfWidth)
        return self.dfs(books, shelfWidth, 0, shelfWidth, 0, {})

    def bfs(self, books, shelf_width):
        # book, width_remaining, row_height
        queue = [(shelf_width - books[0][0], books[0][1], 0)]
        for b in range(1, len(books)):
            queue_size = len(queue)
            while queue_size > 0:
                queue_size -= 1
                current = queue.pop(0)
                if current[0] >= books[b][0]:
                    queue.append((current[0]-books[b][0], max(current[1], books[b][1]), current[2]))
                if current[0] < books[b][0] or books[b][1] > current[1]:
                    queue.append((shelf_width-books[b][0], books[b][1], current[2] + current[1]))
        min_height = math.inf
        for x in queue:
            min_height = min(min_height, x[1] + x[2])
        return min_height

    def dfs(self, books, shelf_width, row_height, width_remaining, j, memo):
        if j >= len(books):
            return row_height

        key =  str(j) + "," + str(width_remaining)
        if key in memo:  return memo[key]

        book = books[j]
        same_row, new_col = math.inf, math.inf

        # add to current row if space permits
        if width_remaining >= book[0]:
            same_row = self.dfs(books, shelf_width, max(row_height, book[1]), \
                                width_remaining - book[0], j+1, memo)
        
        # add to next row
        if width_remaining < book[0] or book[1] > row_height:
            new_col = self.dfs(books, shelf_width, book[1], \
                               shelf_width - book[0], j+1, memo) + row_height
        
        memo[key] = min(same_row, new_col)
        return memo[key]

        

        


TestCase 1:
Input
books =
[[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]]
shelfWidth =
4
Output
6
Expected
6


TestCase 2:
Input
books =
[[1,3],[2,4],[3,2]]
shelfWidth =
6
Output
4
Expected
4
