Hard


Given a list of words, list of  single letters (might be repeating) and score of every character.

Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).

It is not necessary to use all characters in letters and each letter can only be used once. 
Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.

 

Example 1:

Input: words = ["dog","cat","dad","good"], letters = ["a","a","c","d","d","d","g","o","o"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words "dad" (5+1+5) and "good" (3+2+2+5) with a score of 23.
Words "dad" and "dog" only get a score of 21.


Example 2:

Input: words = ["xxxz","ax","bx","cx"], letters = ["z","a","b","c","x","x","x"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words "ax" (4+5), "bx" (4+5) and "cx" (4+5) with a score of 27.
Word "xxxz" only get a score of 25.


Example 3:

Input: words = ["leetcode"], letters = ["l","e","t","c","o","d"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter "e" can only be used once.
 

Constraints:

1 <= words.length <= 14
1 <= words[i].length <= 15
1 <= letters.length <= 100
letters[i].length == 1
score.length == 26
0 <= score[i] <= 10
words[i], letters[i] contains only lower case English letters.



==============================Solution============================

Python

class Solution:
  def maxScoreWords(self, words: List[str], letters: List[chr], score: List[int]) -> int:
    count = collections.Counter(letters)

    def useWord(i: int) -> int:
      isValid = True
      earned = 0
      for c in words[i]:
        count[c] -= 1
        if count[c] < 0:
          isValid = False
        earned += score[ord(c) - ord('a')]
      return earned if isValid else -1

    def unuseWord(i: int) -> None:
      for c in words[i]:
        count[c] += 1

    def dfs(s: int) -> int:
      """Returns the maximum score you can get from words[s..n)."""
      ans = 0
      for i in range(s, len(words)):
        earned = useWord(i)
        if earned > 0:
          ans = max(ans, earned + dfs(i + 1))
        unuseWord(i)
      return ans

    return dfs(0)


class Solution:
    def __init__(self):
        self._words: list[str] = []
        self._letters: dict = {}
        self._score: list[int]
        self._max_score: int = 0

    def backtrack(self, i: int, current_score: int) -> None:
        if current_score > self._max_score:
            self._max_score = current_score

        if i == len(self._words):
            return

        for j in range(i, len(self._words)):
            word = self._words[j]

            word_chars = Counter(word)

            enough_chars = True

            for char, count in word_chars.items():
                if char not in self._letters:
                    enough_chars = False
                    break

                if count > self._letters[char]:
                    enough_chars = False
                    break

            if enough_chars is False:
                continue

            for char, count in word_chars.items():
                self._letters[char] -= count
                current_score += count * self._score[ord(char) - 97]

            self.backtrack(j + 1, current_score)

            for char, count in word_chars.items():
                current_score -= count * self._score[ord(char) - 97]
                self._letters[char] += count

    def maxScoreWords(
        self, words: List[str], letters: List[str], score: List[int]
    ) -> int:
        self._words = words
        self._letters = Counter(letters)
        self._score = score

        self.backtrack(0, 0)

        return self._max_score



class Solution:
    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:
        def f(ind, letterS):
            if ind == len(words):return 0
            copy = letterS
            res = 0
            for each in words[ind]:
                if each not in copy: return f(ind+1, letterS)
                res += score[ord(each)-97]
                copy = copy.replace(each, '', 1)
            return max(f(ind+1, letterS), res + f(ind+1,copy))
        return f(0,''.join(letters))



TestCase 1:
Input
words =
["dog","cat","dad","good"]
letters =
["a","a","c","d","d","d","g","o","o"]
score =
[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output
23
Expected
23

TestCase 2:
Input
words =
["xxxz","ax","bx","cx"]
letters =
["z","a","b","c","x","x","x"]
score =
[4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output
27
Expected
27

TestCase 3:
Input
words =
["leetcode"]
letters =
["l","e","t","c","o","d"]
score =
[0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output
0
Expected
0
