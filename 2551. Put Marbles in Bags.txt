Hard


You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

No bag is empty.
If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
The score after distributing the marbles is the sum of the costs of all the k bags.

Return the difference between the maximum and minimum scores among marble distributions.

 

Example 1:

Input: weights = [1,3,5,1], k = 2
Output: 4
Explanation: 
The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. 
The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. 
Thus, we return their difference 10 - 6 = 4.

Example 2:

Input: weights = [1, 3], k = 2
Output: 0
Explanation: The only distribution possible is [1],[3]. 
Since both the maximal and minimal score are the same, we return 0.
 

Constraints:

1 <= k <= weights.length <= 10^5
1 <= weights[i] <= 10^9


================================Solution===============================

Python

class Solution:
  def putMarbles(self, weights: List[int], k: int) -> int:
    # To distribute marbles into k bags, there will be k - 1 cuts. If there's a
    # cut after weights[i], then weights[i] and weights[i + 1] will be added to
    # the cost. Also, no matter how we cut, weights[0] and weights[n - 1] will
    # be counted. So, the goal is to find the max//min k - 1 weights[i] +
    # weights[i + 1].

    # weights[i] + weights[i + 1]
    A = [a + b for a, b in itertools.pairwise(weights)]
    return sum(heapq.nlargest(k - 1, A)) - sum(heapq.nsmallest(k - 1, A))



class Solution:
    def putMarbles(self, A: List[int], k: int) -> int:
        B = [x+y for x,y in pairwise(A)]
        B.sort()
        if k == 1: return 0
        k -= 1
        return sum(B[-k:]) - sum(B[:k])


class Solution:
    def putMarbles(self, weights: List[int], k: int) -> int:
        # BF: O(n-1 choose k-1 * n), O(1)
        # Insight: A partition consists of k-1 walls from n-1 spots
        # Insight: score of partition is
        # Insight: first + left and right for all walls + last
        # Insight: Walls are just adjacent pairs
        if k == 1:
            return 0
        n = len(weights)
        walls = [weights[i] + weights[i+1] for i in range(n-1)]
        walls.sort()
        return sum(walls[-(k-1):]) - sum(walls[:k-1])


class Solution:
    def putMarbles(self, weights: List[int], k: int) -> int:
        s = sorted(x + y for x, y in zip(weights, weights[1:]))
        return sum(s[len(s)-k+1:]) - sum(s[:k-1])

TestCase 1:
Input
weights =
[1,3,5,1]
k =
2
Output
4
Expected
4

TestCase 2:
Input
weights =
[1,3]
k =
2
Output
0
Expected
0
