Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 

Example 1:


Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.


Example 2:


Input: root = [2,1,3]
Output: [2,1,3]
 

Constraints:

The number of nodes in the tree is in the range [1, 10^4].
1 <= Node.val <= 10^5




==================================Solution======================================

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
  def balanceBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
    nums = []

    def inorder(root: Optional[TreeNode]) -> None:
      if not root:
        return
      inorder(root.left)
      nums.append(root.val)
      inorder(root.right)

    inorder(root)

    def build(l: int, r: int) -> Optional[TreeNode]:
      if l > r:
        return None
      m = (l + r) // 2
      return TreeNode(nums[m],
                      build(l, m - 1),
                      build(m + 1, r))

    return build(0, len(nums) - 1)




# # Definition for a binary tree node.
# # class TreeNode:
# #     def __init__(self, val=0, left=None, right=None):
# #         self.val = val
# #         self.left = left
# #         self.right = right
class Solution:
    # Time Complexity: O(n), inorder O(n) + buildBST O(n) =>  O(n)
    # Space Complexity: O(n), nodes O(n) + recursive call O(logN) =>  O(n) 
    def balanceBST(self, root: TreeNode) -> TreeNode:
        nodes = []
        self.inorder(root, nodes)
        return self.buildBST(nodes, 0, len(nodes)-1)


    def inorder(self, root: TreeNode, nodes):
        if not root:
            return 
        self.inorder(root.left, nodes)
        nodes.append(root)
        self.inorder(root.right, nodes)

    def buildBST(self, nodes, left, right) -> TreeNode:
        if left > right:
            return None
        mid = (left + right)//2
        node = nodes[mid]
        node.left = self.buildBST(nodes, left, mid-1)
        node.right = self.buildBST(nodes, mid+1, right)
        return node
            
# class Solution:
    
#     def makeVine(self, grand, count=0):
#         node = grand.right
#         while node:
#             if node.left:
#                 old_node = node
#                 node = node.left
#                 old_node.left = node.right
#                 node.right = old_node
#                 grand.right = node
#             else:
#                 count += 1
#                 grand = node
#                 node = node.right
#         return count
    
#     def compress(self, grand, m):
#         node = grand.right
#         while m > 1:
#             m-=1
#             old_node = node
#             node = node.right
#             grand.right = node
#             old_node.right = node.left
#             node.left = old_node
#             grand = node
#             node = node.right
    
#     def balanceBST(self, root: TreeNode) -> TreeNode:
#         grand = TreeNode()
#         grand.right = root
#         count = self.makeVine(grand)
#         height = int(log2(count+1))
#         remaining_nodes = pow(2, height) - 1
#         self.compress(grand, count-remaining_nodes)
#         while remaining_nodes > 0:
#             remaining_nodes /= 2
#             self.compress(grand, remaining_nodes)
#         return grand.right


TestCase 1:
Input
root =
[1,null,2,null,3,null,4]
Output
[2,1,3,null,null,null,4]
Expected
[2,1,3,null,null,null,4]


TestCase 2:
Input
root =
[2,1,3]
Output
[2,1,3]
Expected
[2,1,3]
