Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. 
Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 10^9 + 7.

 

Example 1:

Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]


Example 2:

Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].
 

Constraints:

1 <= arr.length <= 1000
2 <= arr[i] <= 10^9
All the values of arr are unique.


=======================================Solution==========================================

Python

class Solution:
  def numFactoredBinaryTrees(self, arr: List[int]) -> int:
    kMod = 1_000_000_007
    n = len(arr)
    # dp[i] := # of binary trees with arr[i] as root
    dp = [1] * n
    arr.sort()
    numToIndex = {a: i for i, a in enumerate(arr)}

    for i, root in enumerate(arr):  # arr[i] is root
      for j in range(i):
        if root % arr[j] == 0:  # arr[j] is left subtree
          right = root // arr[j]
          if right in numToIndex:
            dp[i] += dp[j] * dp[numToIndex[right]]
            dp[i] %= kMod

    return sum(dp) % kMod


class Solution:

    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        arr.sort()
        dp = {num : 1 for num in arr}

        for i in range(1, len(arr)):
            num = arr[i]
            left, right = 0, i - 1
            for j in range(i):
                div = arr[i] / arr[j]
                if div in dp:
                    dp[num] += dp[arr[j]] * dp[div]
        return sum(dp.values()) % (10**9 + 7)


TestCase 1:
Input
arr =
[2,4]
Output
3
Expected
3

TestCase 2:
Input
arr =
[2,4,5,10]
Output
7
Expected
7

