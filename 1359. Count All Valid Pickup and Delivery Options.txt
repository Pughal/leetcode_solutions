Hard

Given n orders, each order consist in pickup and delivery services. 

Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 

Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.

Example 2:

Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.

Example 3:

Input: n = 3
Output: 90
 

Constraints:

1 <= n <= 500


======================================Solution=====================================

Python

class Solution:
  def countOrders(self, n: int) -> int:
    kMod = 1_000_000_007
    ans = 1
    for i in range(1, n + 1):
      ans = ans * i * (i * 2 - 1) % kMod
    return ans


from math import comb, factorial
mod = 1000000007
class Solution:
    def countOrders(self, n: int) -> int:
        return factorial(2 * n) // 2 ** n % mod


class Solution:
    def countOrders(self, n: int) -> int:
        res, mod = 1, 10**9 + 7
        for i in range(2, n + 1):
            res = res * (i * 2 - 1) * (i * 2) / 2 % mod
        return int(res)



TestCase 1:
Input
n =
1
Output
1
Expected
1

TestCase 2:
Input
n =
2
Output
6
Expected
6

TestCase 3:
Input
n =
3
Output
90
Expected
90
