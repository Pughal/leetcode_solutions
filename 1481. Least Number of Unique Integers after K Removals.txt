Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.

 

Example 1:

Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.


Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.
 

Constraints:

1 <= arr.length <= 10^5
1 <= arr[i] <= 10^9
0 <= k <= arr.length



==========================================Solution===========================================

Python

class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        minHeap = list(collections.Counter(arr).values())
        heapq.heapify(minHeap)
        while k > 0:
            k -= heapq.heappop(minHeap)

        return len(minHeap) + (1 if k < 0 else 0)


from collections import Counter
class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int: 
        """
        1. create a hashmap storing all the values and their frequencies 
        2. sort the hashmap by value 
        3. remove the first k keys in the hashmap 
        """
        counts = Counter(arr)
        ordered = sorted(counts.values(), reverse = True)

        while k: 
            val = ordered[-1]
            if val <= k: 
                k -= val
                ordered.pop()
            else:
                break
        
        return len(ordered)


class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        count = Counter(arr)
        ans = len(count)
        for i in sorted(count.values()):
            k -= i
            if k < 0:
                break
            ans -= 1
        return ans


TestCase 1:
Input
arr =
[5,5,4]
k =
1
Output
1
Expected
1

TestCase 2:
Input
arr =
[4,3,1,1,3,3,2]
k =
3
Output
2
Expected
2
