You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. 
You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. 
All the cookies in the same bag must go to the same child and cannot be split up.

The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.

Return the minimum unfairness of all distributions.

 

Example 1:

Input: cookies = [8,15,10,20,8], k = 2
Output: 31

Explanation: One optimal distribution is [8,15,8] and [10,20]
- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.
- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.
The unfairness of the distribution is max(31,30) = 31.
It can be shown that there is no distribution with an unfairness less than 31.


Example 2:

Input: cookies = [6,1,3,2,2,4,1,2], k = 3
Output: 7

Explanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]
- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.
- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.
- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.
The unfairness of the distribution is max(7,7,7) = 7.
It can be shown that there is no distribution with an unfairness less than 7.
 

Constraints:

2 <= cookies.length <= 8
1 <= cookies[i] <= 10^5
2 <= k <= cookies.length

========================================Solution=========================================

Python

class Solution:
    def distributeCookies(self, cookies: List[int], k: int) -> int:
        min_unfairness = float('inf')
        distribution = [0] * k
        
        def backtrack(i):
            nonlocal min_unfairness, distribution
            
            if i == len(cookies):
                min_unfairness = min(min_unfairness, max(distribution))
                return
            
            # Bounding condition to stop a branch if unfairness already exceeds current optimal solution
            if min_unfairness <= max(distribution):
                return
            
            for j in range(k):
                distribution[j] += cookies[i]
                backtrack(i + 1)
                distribution[j] -= cookies[i]
        
        backtrack(0)
        return min_unfairness


class Solution:
    def distributeCookies(self, cookies: List[int], k: int) -> int:
        def backtrack(bag_no):
            nonlocal min_value
            if bag_no == N:
                min_value = min(min_value, max(children))
                return 
            if max(children) >= min_value:
                return
            for child in range(k):
                children[child] += cookies[bag_no]
                backtrack(bag_no + 1)
                children[child] -= cookies[bag_no]
        N = len(cookies)
        if N == k:
            return max(cookies)        
        cookies.sort(reverse=True)
        min_value = float(inf)
        children = [0] * k
        backtrack(0)
        return min_value
        

class Solution:
    def distributeCookies(self, cookies: List[int], k: int) -> int:
        def works(permutation, max_cookies): # max_cookies is max cookies per child
            count = s = 0 # count is min number of children needed, s is sum
            for j in permutation:
                if s + j > max_cookies: count += 1; s = j # New child is needed to take next cookie without going over max_cookies 
                else: s += j # Continue by giving j cookies to next child
            if s != 0: count += 1 # Update count at the end if last child has taken any # of cookies
            return count <= k # Any count <= k works because if count < k, you can always split them up to make count == k
        
        min_ = int(1e9)
        lo, hi = max(cookies), sum(cookies) # Lowest and highest values that might work
        for i in permutations(cookies):
            low, high = lo, hi # Reset low and high
            while low <= high: # Binary Search
                mid = (low + high) // 2
                if works(i, mid): high = mid - 1; min_ = min(min_, mid) # Check from low to mid - 1; Update min_
                else: low = mid + 1 # Check from mid + 1 to high
        return min_



TestCase 1:
Input
cookies =
[8,15,10,20,8]
k =
2
Output
31
Expected
31

TestCase 2:
Input
cookies =
[6,1,3,2,2,4,1,2]
k =
3
Output
7
Expected
7
