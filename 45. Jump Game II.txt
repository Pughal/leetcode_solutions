You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n

Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 10^4
0 <= nums[i] <= 1000

---------------------------------------Solution---------------------------------------
Python

class Solution:
    def jump(self, nums: List[int]) -> int:
        result, last, end = 0, 0, 0

        for i in range(len(nums) - 1):
            last = max(last, i + nums[i])
            if last >= len(nums) - 1:
                result += 1
                break
            if i == end:
                result += 1
                end = last
        
        return result

if  __name__ == "__main__":
    nums = [2,3,1,1,4]
    soln = Solution()
    print(soln.jump(nums))
    

TestCase 1:
Input:
nums = [2,3,1,1,4]
Output:
2
Expected:
2

TestCase 2:
Input:
nums = [2,3,0,1,4]
Output:
2
Expected:
2
