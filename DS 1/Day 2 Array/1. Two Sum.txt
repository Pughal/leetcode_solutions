Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 
Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?


----------------Solution -----------------
Python3

# Brute Force O(n^2)Solution:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        '''Loop through each element x and find if there is another value that equals to targetâˆ’x , '''
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if nums[j] == target - nums[i]:
                    return [i, j]



# we first create an empty dictionary where we are going to store the value and the index of each list element as a key-pair respectively. 
# Then we iterate through the indices and values of the list containing the numbers. 
# If the difference between the target and the current value in the list is already included as a key in the dictionary, 
#  then it means that the current value and the value stored in the dictionary is the solution to the problem.
# Otherwise, we add the value and index as a key-value pair in our dictionary and keep iterating until we find the solution we are looking for.

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        '''O(n) solution'''
        values = {}
        for idx, val in enumerate(nums):
            if target - val in values:
                return [values[target-val], idx]
            else:
                values[val] = idx
                
if __name__ == "__main__":
    nums = [2,7,11,15]
    target = 9
    soln = Solution()
    print(soln.twoSum(nums, target))



TestCase 1:
Input:
nums = [2,7,11,15]
target = 9
Output:
[0,1]
Expected:
[0,1]

TestCase 2:
Input:
nums = [3,2,4]
target = 6
Output:
[1,2]
Expected:
[1,2]

TestCase 3:
Input:
nums = [3,3]
target = 6
Output:
[0,1]
Expected:
[0,1]
