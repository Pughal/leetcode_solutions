You are given an integer array nums of size n.

Consider a non-empty subarray from nums that has the maximum possible bitwise AND.

In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.
Return the length of the longest such subarray.

The bitwise AND of an array is the bitwise AND of all the numbers in it.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.


Example 2:

Input: nums = [1,2,3,4]
Output: 1
Explanation:
The maximum possible bitwise AND of a subarray is 4.
The longest subarray with that value is [4], so we return 1.
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^6




======================================Solution========================================

Python

class Solution:
  def longestSubarray(self, nums: list[int]) -> int:
    ans = 0
    maxIndex = 0
    sameNumLength = 0

    for i, num in enumerate(nums):
      if nums[i] == nums[maxIndex]:
        sameNumLength += 1
        ans = max(ans, sameNumLength)
      elif nums[i] > nums[maxIndex]:
        maxIndex = i
        sameNumLength = 1
        ans = 1
      else:
        sameNumLength = 0

    return ans



class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        m = max(nums)
        return max(len([*g]) for num, g in groupby(nums) if num == m)


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        max_and = max(nums)
        longest_length = 0
        current_length = 0
        
        for num in nums:
            if num == max_and:
                current_length += 1
                longest_length = max(longest_length, current_length)
            else:
                current_length = 0
        
        return longest_length


TestCase 1:
Input
nums =
[1,2,3,3,2,2]
Output
2
Expected
2

TestCase 2:
Input
nums =
[1,2,3,4]
Output
1
Expected
1
