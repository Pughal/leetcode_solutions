You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:

Let i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.
Return the total number of continuous subarrays.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
 

Example 2:

Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^9



============================================Solution=================================================

Python

class Solution:
  def continuousSubarrays(self, nums: list[int]) -> int:
    ans = 1  
    left = nums[0] - 2
    right = nums[0] + 2
    l = 0

    for r in range(1, len(nums)):
      if left <= nums[r] <= right:
        left = max(left, nums[r] - 2)
        right = min(right, nums[r] + 2)
      else:
        left = nums[r] - 2
        right = nums[r] + 2
        l = r
        while nums[r] - 2 <= nums[l] <= nums[r] + 2:
          left = max(left, nums[l] - 2)
          right = min(right, nums[l] + 2)
          l -= 1
        l += 1
      ans += r - l + 1

    return ans


class Solution:
    def continuousSubarrays(self, nums: List[int]) -> int:
        left, right, count = 0, 0, 0
        counter = Counter()

        while right < len(nums):
            counter[nums[right]] += 1

            while left < len(nums) and max(counter) - min(counter) > 2:
                counter[nums[left]] -= 1
                
                if counter[nums[left]] == 0:
                    del counter[nums[left]]
                left += 1
            
            count += right - left + 1
            right += 1
        return count 




from collections import deque

class Solution:
    def continuousSubarrays(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        left = 0
        min_deque = deque()
        max_deque = deque()

        for right in range(n):
            # Update max_deque
            while max_deque and nums[max_deque[-1]] <= nums[right]:
                max_deque.pop()
            max_deque.append(right)

            # Update min_deque
            while min_deque and nums[min_deque[-1]] >= nums[right]:
                min_deque.pop()
            min_deque.append(right)

            # Shrink window if necessary
            while nums[max_deque[0]] - nums[min_deque[0]] > 2:
                left += 1
                if max_deque[0] < left:
                    max_deque.popleft()
                if min_deque[0] < left:
                    min_deque.popleft()

            # Add count of subarrays ending at right
            ans += right - left + 1

        return ans



TestCase 1:
Input
nums =
[5,4,2,4]
Output
8
Expected
8


TestCase 2:
Input
nums =
[1,2,3]
Output
6
Expected
6
