Hard

On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

 

Example 1:


Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.



Example 2:


Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.


Example 3:


Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
 

Constraints:

board.length == 2
board[i].length == 3
0 <= board[i][j] <= 5
Each value board[i][j] is unique.



=======================================Solution========================================

Python

class Solution:
    def slidingPuzzle(self, board):
        # Directions for possible swaps based on '0' position
        dir = [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]]
        target = "123450"
        vis = set() # Track visited configurations
        q = deque()
        start = ""

        # Convert 2D board to a single string
        for row in board:
            for col in row:
                start += str(col)

        q.append(start)
        vis.add(start)
        step = 0

        # Perform BFS
        while q:
            size = len(q)
            for _ in range(size):
                current = q.popleft()

                # Check if target is reached
                if current == target:
                    return step

                zero = current.find('0') # Find position of '0'

                # Generate next moves
                for move in dir[zero]:
                    next_state = list(current)
                    next_state[zero], next_state[move] = next_state[move], next_state[zero]
                    next_state = ''.join(next_state)
                    if next_state not in vis:  # Add unvisited states to the queue
                        vis.add(next_state)
                        q.append(next_state)
            step += 1
        return -1  # Return -1 if target is unreachable



from collections import deque

class Solution:
    def slidingPuzzle(self, board):
        # Convert the board to a single string for easier manipulation
        start = ''.join(str(cell) for row in board for cell in row)
        target = '123450'  # Target state

        # Define the neighbors for each position in a 2x3 board
        neighbors = {
            0: [1, 3], 1: [0, 2, 4], 2: [1, 5],
            3: [0, 4], 4: [1, 3, 5], 5: [2, 4]
        }

        # BFS setup
        queue = deque([(start, start.index('0'), 0)])  # (current_state, position_of_0, moves)
        visited = set([start])

        while queue:
            state, zero_pos, moves = queue.popleft()

            if state == target:
                return moves

            # Explore all possible moves
            for neighbor in neighbors[zero_pos]:
                new_state = list(state)
                # Swap 0 with the neighbor
                new_state[zero_pos], new_state[neighbor] = new_state[neighbor], new_state[zero_pos]
                new_state_str = ''.join(new_state)

                # If this state hasn't been visited, add it to the queue
                if new_state_str not in visited:
                    visited.add(new_state_str)
                    queue.append((new_state_str, neighbor, moves + 1))

        # If the target state is not reached
        return -1

# Example usage
board = [[1, 2, 3], [4, 0, 5]]
solution = Solution()
print(solution.slidingPuzzle(board))  # Output: Least number of moves or -1 if unsolvable
        


TestCase 1:
Input
board =
[[1,2,3],[4,0,5]]
Output
1
Expected
1


TestCase 2:
Input
board =
[[1,2,3],[5,4,0]]
Output
-1
Expected
-1

TestCase 3:
Input
board =
[[4,1,2],[5,0,3]]
Output
5
Expected
5
