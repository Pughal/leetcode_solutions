Hard


You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.

In the ith operation (1-indexed), you will:

Choose two elements, x and y.
Receive a score of i * gcd(x, y).
Remove x and y from nums.
Return the maximum score you can receive after performing n operations.

The function gcd(x, y) is the greatest common divisor of x and y.

 

Example 1:

Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1

Example 2:

Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11

Example 3:

Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14
 

Constraints:

1 <= n <= 7
nums.length == 2 * n
1 <= nums[i] <= 10^6


==========================================Solution========================================

Python

class Solution:
    def maxScore(self, nums: List[int]) -> int:
        # Determine number of elements
        num_elems = len(nums)
        
        # Construct matrix of greatest common divisors for all pairs of elements
        gcd_pairs = [[gcd(nums[i], nums[j]) for j in range(num_elems)] for i in range(num_elems)]
        
        # Use dynamic programming to find maximum score
        max_scores = [0] * (1 << num_elems)
        for state in range(1, 1 << num_elems):
            num_selected = bin(state).count('1')
            
            # Skip states with odd number of selected elements
            if num_selected % 2 == 1:
                continue
            
            # Iterate over all pairs of selected elements
            for i in range(num_elems):
                if not (state & (1 << i)):
                    continue
                for j in range(i+1, num_elems):
                    if not (state & (1 << j)):
                        continue
                    
                    # Compute score for current state based on previous state and current pair of elements
                    prev_state = state ^ (1 << i) ^ (1 << j)
                    current_score = max_scores[prev_state] + num_selected // 2 * gcd_pairs[i][j]
                    
                    # Update maximum score for current state
                    max_scores[state] = max(max_scores[state], current_score)
        
        # Return maximum score for state with all elements selected
        return max_scores[(1 << num_elems) - 1]


class Solution:
    def maxScore(self, nums: List[int]) -> int:
        n = len(nums)//2
        @cache
        def dp(i, mask):
            if i == 2*n:
                return ([])
            if not (mask >> i)&1:
                return dp(i+1, mask)
            ans = []
            tot = 0
            mask -= (1 << i)
            for j in range(i+1, 2*n):
                if (mask >> j)&1:
                    gcds = sorted(dp(i+1, mask-(1<<j))+[gcd(nums[i], nums[j])])
                    score = sum(((i+1)*gcds[i]) for i in range(len(gcds)))
                    if score > tot:
                        ans = gcds
                        tot = score
            return ans
        gcds = sorted(dp(0, (1<<(2*n))-1))
        # print(gcds)
        return sum(((i+1)*gcds[i]) for i in range(n))




TestCase 1:
Input
nums = [1,2]
Output
1
Expected
1

TestCase 2:
Input
nums = [3,4,6,8]
Output
11
Expected
11

TestCase 3:
Input
nums = [1,2,3,4,5,6]
Output
14
Expected
14
