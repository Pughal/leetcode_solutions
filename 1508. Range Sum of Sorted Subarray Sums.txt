You are given the array nums consisting of n positive integers. 
You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. 
The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 


Example 2:

Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


Example 3:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50
 

Constraints:

n == nums.length
1 <= nums.length <= 1000
1 <= nums[i] <= 100
1 <= left <= right <= n * (n + 1) / 2


================================Solution=====================================

Python


class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        MOD = 1000000007
        subarray_sums = []
        
        for i in range(n):
            current_sum = 0
            for j in range(i, n):
                current_sum += nums[j]
                subarray_sums.append(current_sum)
        
        subarray_sums.sort()
        
        range_sum = sum(subarray_sums[left-1:right]) % MOD
        
        return range_sum




class Solution:
    def rangeSum(self, nums, n, left, right):
        mod = 10**9 + 7
        def countAndSum(nums, n, target):
            count = 0
            currentSum = 0
            totalSum = 0
            windowSum = 0
            i = 0
            for j in range(n):
                currentSum += nums[j]
                windowSum += nums[j] * (j - i + 1)
                while currentSum > target:
                    windowSum -= currentSum
                    currentSum -= nums[i]
                    i += 1
                count += j - i + 1
                totalSum += windowSum
            return count, totalSum

        def sumOfFirstK(nums, n, k):
            minSum = min(nums)
            maxSum = sum(nums)
            left = minSum
            right = maxSum

            while left <= right:
                mid = left + (right - left) // 2
                if countAndSum(nums, n, mid)[0] >= k:
                    right = mid - 1
                else:
                    left = mid + 1
            count, totalSum = countAndSum(nums, n, left)
            # There can be more subarrays with the same sum of left.
            return totalSum - left * (count - k)
            
        result = (sumOfFirstK(nums, n, right) - sumOfFirstK(nums, n, left - 1)) % mod
        # Ensure non-negative result
        return (result + mod) % mod


class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        m = len(nums)
        heap = [(nums[i], i) for i in range(m)]
        heapify(heap)

        res = 0
        for k in range(1, right + 1):
            sm, i = heappop(heap)
            if i < n - 1:
                heappush(heap, (sm + nums[i + 1], i + 1))
            if k >= left:
                res += sm
                res %= (10 ** 9 + 7)
        return res



TestCase 1:
Input
nums =
[1,2,3,4]
n =
4
left =
1
right =
5
Output
13
Expected
13


TestCase 2:
Input
nums =
[1,2,3,4]
n =
4
left =
3
right =
4
Output
6
Expected
6

TestCase 3:
Input
nums =
[1,2,3,4]
n =
4
left =
1
right =
10
Output
50
Expected
50
