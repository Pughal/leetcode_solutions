Hard


Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:

Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.


Example 2:

Input: n = 1, k = 1
Output: 1
 

Constraints:

1 <= k <= n <= 10^9



===============================================Solution===================================================

Python

class Solution:
  def findKthNumber(self, n: int, k: int) -> int:
    ans = 1

    i = 1
    while i < k:
      gap = self._getGap(ans, ans + 1, n)
      if i + gap <= k:
        i += gap
        ans += 1
      else:
        i += 1
        ans *= 10

    return ans

  def _getGap(self, a: int, b: int, n: int) -> int:
    gap = 0
    while a <= n:
      gap += min(n + 1, b) - a
      a *= 10
      b *= 10
    return gap    




class Solution(object):
    def findKthNumber(self, n, k):
        curr = 1
        k -= 1

        while k > 0:
            step = self._count_steps(n, curr, curr + 1)
            # If the steps are less than or equal to k, we skip this prefix's subtree
            if step <= k:
                # Move to the next prefix and decrease k by the number of steps we skip
                curr += 1
                k -= step
            else:
                # Move to the next level of the tree and decrement k by 1
                curr *= 10
                k -= 1

        return curr

    # To count how many numbers exist between prefix1 and prefix2
    def _count_steps(self, n, prefix1, prefix2):
        steps = 0
        while prefix1 <= n:
            steps += min(n + 1, prefix2) - prefix1
            prefix1 *= 10
            prefix2 *= 10
        return steps



class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        cur = 1
        k-=1
        while k>0:
            step, first, last = 0, cur, cur+1
            while first <=n:
                step +=min(n+1, last) - first
                first *=10
                last *=10
            if step <=k:
                cur+=1
                k-=step
            else:
                cur*=10
                k-=1
        
        return cur


TestCase 1:
Input
n =
13
k =
2
Output
10
Expected
10

TestCase 2:
Input
n =
1
k =
1
Output
1
Expected
1
