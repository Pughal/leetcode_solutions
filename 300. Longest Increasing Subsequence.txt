Given an integer array nums, return the length of the longest strictly increasing subsequence.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4


Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1
 

Constraints:

1 <= nums.length <= 2500
-10^4 <= nums[i] <= 10^4
 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?


===============================Solution================================

Python

class Solution:
  def lengthOfLIS(self, nums: List[int]) -> int:
    if not nums:
      return 0

    dp = [1] * len(nums)

    for i in range(1, len(nums)):
      for j in range(i):
        if nums[j] < nums[i]:
          dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)


class Solution:
  def lengthOfLIS(self, nums: List[int]) -> int:
    # tails[i] := the minimum tails of all the increasing subsequences having
    # length i + 1
    # It's easy to see that `tails` must be an increasing array.
    tails = []

    for num in nums:
      if not tails or num > tails[-1]:
        tails.append(num)
      else:
        tails[bisect.bisect_left(tails, num)] = num

    return len(tails)


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
       
        #LiS[i] will store longest increasing subsequences for up to index i (including it)
        LiS = [1] * len(nums) #initialize with 1 since that is minimum increasing subsequence len (every single character by itself)

        for i in range(1,len(nums)):
            for j in range(i):
                #for every index, consider every other subsequence that came before it to decide whether to append or not
                if nums[i] > nums[j]:
                   #if curr number is greater than the last number in a previous subsequence, then can append
                   

                   LiS[i] = max(LiS[i], LiS[j] + 1)
        return max(LiS)

        #time: O(n^2) in worst case when checking from start to end index of nums
        #space: O(n) to store previous longest increasing subsequence values

TestCase 1:
Input
nums =
[10,9,2,5,3,7,101,18]
Output
4
Expected
4

TestCase 2:
Input
nums =
[0,1,0,3,2,3]
Output
4
Expected
4

TestCase 3:
Input
nums =
[7,7,7,7,7,7,7]
Output
1
Expected
1
