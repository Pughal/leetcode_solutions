Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]


Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 10^4
-10^4 <= nums[i] <= 10^4
2 <= k <= 10^4




==========================Solution============================

Python

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        mod = [0]*k
        mod[0] = 1
        count = 0
        s = 0
        for num in nums:
            s += num
            count += mod[s % k]
            mod[s % k] += 1
        return count


class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        d = defaultdict(int)
        d[0] = 1
        res, pref = 0, 0
        for n in nums:
            pref += n
            res += d[pref % k]
            d[pref % k] += 1
        return res



TestCase 1:
Input
nums =
[4,5,0,-2,-3,1]
k =
5
Output
7
Expected
7


TestCase 2:
Input
nums =
[5]
k =
9
Output
0
Expected
0
