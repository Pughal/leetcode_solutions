Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]


Example 2:

Input: root = [1,2,3]
Output: [1,3]
 

Constraints:

The number of nodes in the tree will be in the range [0, 104].
-2^31 <= Node.val <= 2^31 - 1



=====================================Solution=================================

Python


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        # BFS with backtracking, finding the best 
        # use a queue FIFO - array datastructure
        max_val = []
        cur_queue = deque()
        cur_queue.append(root)
        
        if not root:
            return max_val
        
        while cur_queue:
            n = len(cur_queue)
            cur_lvl_max = float('-inf')
            
            for _ in range(n):
                node = cur_queue.popleft()
                cur_lvl_max = max(cur_lvl_max, node.val)
                
                if node.left:
                    cur_queue.append(node.left)
                
                if node.right:
                    cur_queue.append(node.right)
                
            max_val.append(cur_lvl_max)        
        return(max_val)
            



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def largestValues(self, root: Optional[TreeNode]) -> List[int]:
        levels = []
        
        def dfs(root: Optional[TreeNode], level: int = 0) -> None:
            if not root:
                return
            if level >= len(levels):
                levels.append(root.val)
            levels[level] = max(levels[level], root.val)
            dfs(root.left, level + 1)
            dfs(root.right, level + 1)
        
        dfs(root)
        return levels


TestCase 1:
Input
root =
[1,3,2,5,3,null,9]
Output
[1,3,9]
Expected
[1,3,9]


TestCase 2:
Input
root =
[1,2,3]
Output
[1,3]
Expected
[1,3]
