Hard


Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.


Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-10^6 <= nums1[i], nums2[i] <= 10^6


===========================================Solution=========================================

Python

class Solution:
  def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
    n1 = len(nums1)
    n2 = len(nums2)
    if n1 > n2:
      return self.findMedianSortedArrays(nums2, nums1)
     

    l = 0
    r = n1

    while l <= r:
      partition1 = (l + r) // 2
      partition2 = (n1 + n2 + 1) // 2 - partition1
      maxLeft1 = float('-inf') if partition1 == 0 else nums1[partition1 - 1]
      maxLeft2 = float('-inf') if partition2 == 0 else nums2[partition2 - 1]
      minRight1 = float('inf') - 1 if partition1 == n1 else nums1[partition1]
      minRight2 = float('inf') - 1 if partition2 == n2 else nums2[partition2]
      if maxLeft1 <= minRight2 and maxLeft2 <= minRight1:
        return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) * 0.5 if (n1 + n2) % 2 == 0 else max(maxLeft1, maxLeft2)
      elif maxLeft1 > minRight2:
        r = partition1 - 1
      else:
        l = partition1 + 1



class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        li=sorted(nums1+nums2)
        l=len(li)
        if l%2==1:
          return li[l//2]
        else:
          m=l//2
          return (li[m]+li[m-1])/2.0


import statistics
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        return statistics.median(sorted(nums1+nums2))


# Binary search (two pointers) on nums1 (A). Compare mid of nums1 and nums2, and readjust pointer from there. 

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        A, B = nums1, nums2

        if len(A) > len(B):
            A, B = B, A
        
        fullLen = len(A) + len(B)
        halfLen = fullLen // 2

        left, right = 0, len(A) - 1
        while True:
            midA = (left + right) // 2
            midB = halfLen - midA - 2 # "2" is made up of "1" 0-index from A and "1" 0-index from B

            ALeft = A[midA] if midA >= 0 else float('-inf')
            ARight = A[midA + 1] if (midA + 1) < len(A) else float('inf')
            BLeft = B[midB] if midB >= 0 else float('-inf')
            BRight = B[midB + 1]  if (midB + 1) < len(B) else float('inf')

            if ALeft <= BRight and BLeft <= ARight:
                if fullLen % 2 == 0:
                    return (max(ALeft, BLeft) + min(ARight, BRight)) / 2
                else:
                    return min(ARight, BRight)
            elif ALeft > BRight:
                right = midA - 1
            else:
                left = midA + 1                    



TestCase 1:
Input
nums1 =
[1,3]
nums2 =
[2]
Output
2.00000
Expected
2.00000

TestCase 2:
Input
nums1 =
[1,2]
nums2 =
[3,4]
Output
2.50000
Expected
2.50000
