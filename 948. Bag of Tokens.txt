You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] donates the value of tokeni.

Your goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):

Face-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.
Face-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.
Return the maximum possible score you can achieve after playing any number of tokens.

 

Example 1:

Input: tokens = [100], power = 50
Output: 0
Explanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).

Example 2:

Input: tokens = [200,100], power = 150
Output: 1
Explanation: Play token1 (100) face-up, reducing your power to 50 and increasing your score to 1.
There is no need to play token0, since you cannot play it face-up to add to your score. The maximum score achievable is 1.

Example 3:

Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
Play token0 (100) face-up, reducing power to 100 and increasing score to 1.
Play token3 (400) face-down, increasing power to 500 and reducing score to 0.
Play token1 (200) face-up, reducing power to 300 and increasing score to 1.
Play token2 (300) face-up, reducing power to 0 and increasing score to 2.
The maximum score achievable is 2.

 

Constraints:

0 <= tokens.length <= 1000
0 <= tokens[i], power < 10^4



======================================Solution====================================

Python

class Solution:
  def bagOfTokensScore(self, tokens: List[int], power: int) -> int:
    ans = 0
    score = 0
    q = collections.deque(sorted(tokens))

    while q and (power >= q[0] or score):
      while q and power >= q[0]:
        power -= q.popleft()
        score += 1
      ans = max(ans, score)
      
      if q and score:
        power += q.pop()
        score -= 1

    return ans


class Solution:
    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:
        #play face down till possible with smallest tokens & increase score
        #play face up with largest number & reduce score
        tokens.sort()
        i, j = 0, len(tokens) - 1
        score = 0
        max_score = 0 #we need a variable to store max score before we reduce to score to increase power.If reducing score was not worth it in the end the just return ans
        while i <= j:
            if tokens[i] <= power:
                power -= tokens[i]
                score += 1
                i += 1
                max_score = max(max_score, score) 
            #now reduce score
            elif score >= 1:
                power += tokens[j]
                j -= 1
                score -= 1
            else: #If can not do both, either you don't enough power or enough score. stop
                break
        return max_score


            
class Solution:
    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:
        """
        score = 0

        if power > token[i]
        face up 
        power -= token[i]
        score += 1

        face down => score  >= 1
        power += token[i]
        score -= 1

        get the max power by face down
        reduce the min power when face up
        """

        tokens.sort()

        i, j = 0, len(tokens)-1
        score = 0
        m = 0 

        # start from left, becuase we have no power
        while i <= j:
            if power < tokens[i]:
                if score == 0:
                    return 0
                power += tokens[j]
                score -= 1
                j -= 1
            else:
                power = power - tokens[i]
                score += 1
                i += 1
                m = max(score, m)
        
        return m        



TestCase 1:
Input
tokens =
[100]
power =
50
Output
0
Expected
0

TestCase 2:
Input
tokens =
[200,100]
power =
150
Output
1
Expected
1

TestCase 3:
Input
tokens =
[100,200,300,400]
power =
200
Output
2
Expected
2
