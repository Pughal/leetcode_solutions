Given two integer arrays pushed and popped each with distinct values, 
return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true

Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Constraints:

1 <= pushed.length <= 1000
0 <= pushed[i] <= 1000
All the elements of pushed are unique.
popped.length == pushed.length
popped is a permutation of pushed.


------------------------------------------------------Solution-------------------------------------------------------

Python

class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        stack = []
        i = 0

        for x in pushed:
            stack.append(x)
            while stack and stack[-1] == popped[i]:
                stack.pop()
                i += 1
        return not stack

class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        a=[]
        if pushed==popped or popped==pushed[::-1]:
            return True

        for i in pushed:
            a.append(i)
            while a:
                if a[-1]==popped[0]:
                    a.pop()
                    del(popped[0])
                else:
                    break
        if popped==a[::-1]:
            return True
        else:
            return False


TestCase 1:
Input:
pushed = [1,2,3,4,5]
popped = [4,5,3,2,1]
Output:
true
Expected:
true

TestCase 2:
Input:
pushed = [1,2,3,4,5]
popped = [4,3,5,1,2]
Output:
false
Expected:
false

