Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".

Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.

Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 

Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.


===================================Solution=========================================

Python

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        dp = [False] * (n + 1)
        dp[0] = True
        max_len = max(map(len, wordDict))  # The maximum length of a word in the dictionary

        for i in range(1, n + 1):
            for j in range(i - 1, max(i - max_len - 1, -1), -1): # Only consider words that could fit
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
                    break

        return dp[n]



class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        dp = [False]*n
        dp[0] = s[0] in wordDict
        for i in range(1,n):
            dp[i] = s[0:i+1] in wordDict
            for j in range(i):
                dp[i] = dp[i] or (dp[i-j-1] and (s[i-j:i+1] in wordDict))
        return dp[n-1]


TestCase 1:
Input
s =
"leetcode"
wordDict =
["leet","code"]
Output
true
Expected
true

TestCase 2:
Input
s =
"applepenapple"
wordDict =
["apple","pen"]
Output
true
Expected
true

TestCase 3:
Input
s =
"catsandog"
wordDict =
["cats","dog","sand","and","cat"]
Output
false
Expected
false
